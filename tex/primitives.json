{"primitives" : [
    {
        "name": "badness",
        "synopsis": "\\badness",
        "description": "This is an internal quantity set after each box is made. It is between 0 and 10,000 unless the box is overfull. Then it is 1,000,000 **[229]**. If *r* is the *glue set ratio* **[77]**, `\\badness` is approximately min(100*r*^3,10000) **[97]**.",
        "related": "hbadness, vbadness, pretolerance, tolerance, emergencystretch.",
        "descriptionshort": "is 0-10,000 and represents the badness of the glue settings in the last constructed box.",
        "type": "internal quantity"
    },{
        "name": "box",
        "synopsis": "\\box<8-bit register number>",
        "description": "There are 256 box registers: `\\box0` to `\\box255`. A `\\box` command adds the contents of the box to the current list, and it empties the box. It often is better to use `\\unhbox` or `\\unvbox` since they remove the outermost layer of glue in the box. That allows the box's contents to *mesh* with the other items in the current list. The `\\copy` command is similar to `\\box` except `\\copy` does not empty the box **[120]**. Plain TeX has a `\\newbox` command which reserves a box for a special purpose **[121]**. Each insertion class (`\\insert`) reserves a box for its use **[122]**. Also, `\\box255` holds the current page which is used by the `\\output` routine **[253]**.",
        "related": "copy, unhbox, unvbox, unhcopy, unvcopy.",
        "descriptionshort": "puts the box's contents in the current list and empties the box.",
        "type": "command"
    },{
        "name": "boxmaxdepth",
        "synopsis": "\\boxmaxdepth",
        "description": "This is a dimen parameter whose Plain TeX value is `\\maxdimen`. It is used to fix the depth and height of vboxes. TeX ensures that the depth of a `\\vbox` is no larger than `\\boxmaxdepth`. If necessary, TeX moves the reference point in the vbox down and thereby increases the height and decreases the depth of the box. When a `\\vtop` is constructed, `\\boxmaxdepth` is not used **[81]**. An output routine often sets `\\boxmaxdepth` to `\\maxdepth` when it builds the body of each page **[255]**.",
        "related": "maxdepth, vbox.",
        "descriptionshort": "is the maximum possible depth of a vertical box.",
        "type": "parameter (dimen)"
    },{
        "name": "cleaders",
        "synopsis": "\\cleaders<box or rule><glue>",
        "description": "Leaders are used to fill space with a box or a rule. Normally, copies of a box will not completely fill a specified space. So, in addition to `\\leaders`, TeX provides two additional ways to put boxes in the space. The first is `\\cleaders`. It packs boxes tightly together and centers them in the specified space. The second is `\\xleaders`. It breaks the leftover space into equal pieces and puts one piece between each box and on the left and right ends of the boxes. The result is an *sbsb* \\char144\\ *sbs* pattern where *s* stands for one of the pieces of space and *b* for one of the boxes **[224]**.",
        "related": "leaders, xleaders.",
        "descriptionshort": "insert centered leaders.",
        "type": "command"
    },{
        "name": "copy",
        "synopsis": "\\copy<8-bit register number>",
        "description": "This command add a copy of the list in the box register to the current list. It behaves just like the `\\box` command except it does not empty the contents of the register **[120]**.",
        "related": "box, unhcopy, unvcopy.",
        "descriptionshort": "puts the box's contents in the current list but does not empty the box.",
        "type": "command"
    },{
        "name": "dp",
        "synopsis": "\\dp<8-bit register number>",
        "description": "Every box has a depth which is a <dimen> quantity. When material is placed in a box, the depth of the box is automatically recomputed. The depth may be accessed or changed using `\\dp`<number> **[120]**.",
        "related": "ht, wd, setbox.",
        "descriptionshort": "is the depth of a box.",
        "type": "internal quantity"
    },{
        "name": "everyhbox",
        "synopsis": "\\everyhbox{<token list>}",
        "description": "This parameter holds a list of tokens that gets inserted at the start of every `\\hbox` **[275]**. However, if there is an `\\afterassignment` active, and the `\\hbox` appears in a `\\setbox` assignment, then the `\\everyhbox` token list is placed in the `\\hbox` immediately after the `\\afterassignment` token **[279]**.",
        "related": "everyvbox, toks.",
        "descriptionshort": "holds tokens inserted at the start of every hbox.",
        "type": "parameter (token)"
    },{
        "name": "everyvbox",
        "synopsis": "\\everyvbox{<token list>}",
        "description": "This parameter holds a list of tokens that gets inserted at the start of every `\\vbox` or `\\vtop` **[275]**. However, if there is an `\\afterassignment` active, and the `\\vbox` appears in a `\\setbox` assignment, then the `\\everyvbox` token list is placed in the `\\vbox` immediately after the `\\afterassignment` token **[279]**.",
        "related": "everyhbox, toks.",
        "descriptionshort": "holds tokens inserted at the start of every vbox.",
        "type": "parameter (token)"
    },{
        "name": "hbadness",
        "synopsis": "\\hbadness",
        "description": "When an `\\hbox` is made, the `\\badness` of the box is compared to `\\hbadness`. If `\\badness` is less than or equal to `\\hbadness`, the box is acceptable **[272]**. Otherwise, a message is written to the log file, and the box is considered: overfull, tight, loose, or underfull. The distinction between the four types of bad boxes depends on whether the glue in the box shrinks or stretches and on the parameters: `\\hbadness` and `\\hfuzz`. The following table **[302]** summarizes the possibilities:\n```\nBad box type  Glue     Additional conditions\n---------------------------------------------------------------\nOverfull      Shrink   \\hbadness < 100 or excess width > \\hfuzz\nTight         Shrink   (all other shrink cases)\nLoose         Stretch  \\hbadness < \\badness <= 100\nUnderfull     Stretch  (all other stretch cases)\n---------------------------------------------------------------\n```",
        "related": "hfuzz, badness, vbadness.",
        "descriptionshort": "is the badness above which bad hboxes are reported.",
        "type": "parameter (integer)"
    },{
        "name": "hbox",
        "synopsis": "\\hbox<box specification>{<horizontal material>}",
        "description": "There are three forms of `\\hbox`: '`\\hbox` {material}'; '`\\hbox` to <dimen> {material}'; and '`\\hbox` spread <dimen> {material}'. The *to* version makes a box <dimen> wide, and the *spread* version increases the natural width of the box by <dimen>. The baseline of a constructed `\\hbox` is the baseline of the boxes inside it before they were raised or lowered. The height and depth of the box are the maximum distances the interior boxes are above and below the baseline. The width of the box can be negative if the box contains a negative `\\kern` or `\\hskip` **[77]**. When `\\hbox` is used in horizontal mode, it adds material to the current paragraph. When it is used in vertical mode, it adds material to the current page **[86]**. An `\\hbox` is indivisible. TeX will not split it over two lines **[93]**.",
        "related": "setbox, vbox, vtop.",
        "descriptionshort": "constructs a box holding horizontal material.",
        "type": "command"
    },{
        "name": "hfuzz",
        "synopsis": "\\hfuzz",
        "description": "This is a dimen parameter used with `\\hbadness` in classifying an `\\hbox` which contains more material than will fit even after the glue in the box has shrunk all it can. TeX considers the box overfull if the excess width of the box is larger than `\\hfuzz` or `\\hbadness` is less than 100 **[302]**.",
        "related": "hbadness, vfuzz.",
        "descriptionshort": "is the overrun allowed before overfull hboxes are reported.",
        "type": "parameter (dimen)"
    },{
        "name": "hrule",
        "synopsis": "\\hrule[height<dimen> depth<dimen> width<dimen>]",
        "description": "A rule box is a solid black rectangular box with a height, depth, and width. Such a box may look like a horizontal or vertical line. The `\\hrule` command makes a rule box, and it usually is used in vertical mode. If none of the box dimensions are specified, the box has height 0.4pt and depth 0pt. Its width is the width of the smallest box that encloses it. No interline glue is placed before or after an `\\hrule` **[221]**. Normally, when `\\hrule` is used in horizontal mode, the paragraph is ended, and the rule box is typeset **[222]**. However, `\\hrule` may be used with `\\leaders` in horizontal mode with no unexpected effects **[224-225]**.",
        "related": "vrule, leaders.",
        "descriptionshort": "makes a rule box in vertical mode.",
        "type": "command"
    },{
        "name": "ht",
        "synopsis": "\\ht<8-bit register number>",
        "description": "Every box has a height which is a <dimen> quantity. When material is placed in a box, the height of the box is automatically recomputed. The height may be accessed or changed using `\\ht`<number> **[120]**.",
        "related": "dp, wd, setbox.",
        "descriptionshort": "is the height of a box.",
        "type": "internal quantity"
    },{
        "name": "lastbox",
        "synopsis": "\\lastbox",
        "description": "This command is used with the other `last` commands to step through the items in a list. If the last item on the current horizontal or internal vertical list is an `\\hbox`, `\\vbox`, or `\\vtop`, `\\lastbox` becomes the box and removes it from the list; otherwise `\\lastbox` is void. The command may not be used on the main vertical list or in math mode **[222]**.",
        "related": "lastkern, lastpenalty, lastskip.",
        "descriptionshort": "is void or the last hbox or vbox on the current list.",
        "type": "command"
    },{
        "name": "leaders",
        "synopsis": "\\leaders<box or rule><glue>",
        "description": "Leaders consist of a box and some glue. Copies of the box are used to fill the space specified by the glue **[223]**. Leaders made with `\\leaders` are aligned **[224]**. A rule may be used in place of a box. This allows `\\hrule` to make a horizontal line in horizontal mode **[224-225]**.",
        "related": "cleaders, xleaders, hrule.",
        "descriptionshort": "fill space using specified glue with a box or rule.",
        "type": "command"
    },{
        "name": "overfullrule",
        "synopsis": "\\overfullrule",
        "description": "This parameter determines the width of the vertical rule placed at the end of overfull boxes **[274]**. The rule is not present in underfull boxes or  if `\\overfullrule=0pt` **[307]**.",
        "descriptionshort": "is the width of the rule appended to an overfull box.",
        "type": "parameter (dimen)"
    },{
        "name": "prevdepth",
        "synopsis": "\\prevdepth",
        "description": "Normally, `\\prevdepth` holds the depth of the box most recently added to the current vertical list **[79]**. TeX uses that value to put interline glue between boxes on the list. The special value -1000pt suppresses the next interline glue, and it is placed at the beginning of most new vertical lists. The Plain TeX macro `\\nointerlineskip` is just '`\\prevdepth=-1000pt`' **[80]**. However, vertical lists begun by `\\halign` and `\\noalign` do not begin with -1000pt. Each keeps the interline glue used by the list which contains it. Finally, `\\prevdepth` is not affected by `\\unvbox` or `\\unvcopy` **[282]**.",
        "related": "baselineskip, unvbox, unvcopy.",
        "descriptionshort": "is the depth of the last box added to the current vertical list.",
        "type": "internal quantity"
    },{
        "name": "setbox",
        "synopsis": "\\setbox<8-bit register number>=<hbox or vbox>",
        "description": "The `\\setbox` command puts material in a box register (`\\box0` to `\\box255`). Box registers are local to a group. A box register is either void or it contains an `\\hbox`, `\\vbox`, or `\\vtop`. Once material is placed in a box, it may be typeset or moved by `\\box`, `\\copy`, `\\vsplit`, or one of the unbox commands **[120]**.",
        "related": "box, hbox, vbox, vtop, vsplit, unhbox, unhcopy, unvbox, unvcopy.",
        "descriptionshort": "assigns an hbox, vbox, or vtop to a box register.",
        "type": "command"
    },{
        "name": "unhbox",
        "synopsis": "\\unhbox<8-bit register number>",
        "description": "This command is similar to `\\box` except it *unsets* glue at the box's outermost level **[120]**. Also, the box register must either contain an `\\hbox` or be empty **[285]**. In horizontal mode nothing happens if the register is empty, and the horizontal list in the register is added without change to the current list if it is not **[285]**. In vertical mode a new paragraph is begun; the `\\indent` command is performed; the tokens in `\\everypar` are added to the new horizontal list; and the contents of the `\\hbox` are added to that list **[283]**. In math mode the register must be empty **[293]**. After an `\\unhbox` command the box register is empty **[285]**.",
        "related": "unhcopy, box.",
        "descriptionshort": "puts unwrapped hbox contents in the current list and empties the box.",
        "type": "command"
    },{
        "name": "unhcopy",
        "synopsis": "\\unhcopy<8-bit register number>",
        "description": "This command is similar to `\\copy` except it *unsets* glue at the box's outermost level **[120]**. Also, the box register must either contain a `\\hbox` or be empty **[285]**. In horizontal mode nothing happens if the register is empty, and the horizontal list in the register is added without change to the current list if it is not **[285]**. In vertical mode a new paragraph is begun; the `\\indent` command is performed; the tokens in `\\everypar` are added to the new horizontal list; and the contents of the `\\hbox` are added to that list **[283]**. In math mode the register must be empty **[293]**. The box register is unchanged by an `\\unhcopy` command **[285]**.",
        "related": "unhbox, box, copy.",
        "descriptionshort": "puts unwrapped hbox contents in the current list but does not empty the box.",
        "type": "command"
    },{
        "name": "unvbox",
        "synopsis": "\\unvbox<8-bit register number>",
        "description": "This command is similar to `\\box` except it *unsets* glue at the box's outermost level **[120]**. Also, the box register must either contain a `\\vbox` (or `\\vtop`**[nr]**) or be empty. In vertical mode nothing happens if the register is empty, and the vertical list in the register is added without change to the current list if it is not. In particular, `\\prevdepth` is not changed **[282]**. In horizontal mode `\\par` is added to the current paragraph and then the vertical list in the vbox is added to the current list. The command is not allowed in restricted horizontal mode **[286]** or in math mode. After an `\\unvbox` command the box register is empty **[120]**.",
        "related": "unvcopy, box.",
        "descriptionshort": "puts unwrapped vbox contents in the current list and empties the box.",
        "type": "command"
    },{
        "name": "unvcopy",
        "synopsis": "\\unvcopy<8-bit register number>",
        "description": "This command is similar to `\\copy` except it *unsets* glue at the box's outermost level **[120]**. Also, the box register must either contain a `\\vbox` (or `\\vtop`**[nr]**) or be empty. In vertical mode nothing happens if the register is empty, and the vertical list in the register is added without change to the current list if it is not. In particular, `\\prevdepth` is not changed **[282]**. In horizontal mode `\\par` is added to the current paragraph and then the vertical list in the vbox is added to the current list. The command is not allowed in restricted horizontal mode **[286]** or in math mode. The box register is unchanged by an `\\unvcopy` command **[120]**.",
        "related": "unvbox, box, copy.",
        "descriptionshort": "puts unwrapped vbox contents in the current list but does not empty the box.",
        "type": "command"
    },{
        "name": "vbadness",
        "synopsis": "\\vbadness",
        "description": "When an `\\vbox` or `\\vtop` is made, the `\\badness` of the box is compared to `\\vbadness`. If `\\badness` is less than or equal to `\\vbadness`, the box is acceptable **[272]**. Otherwise, a message is written to the log file, and the box is considered: overfull, tight, loose, or underfull. The distinction between the four types of bad boxes depends on whether the glue in the box shrinks or stretches and on the parameters: `\\vbadness` and `\\vfuzz`. The following table **[302]** summarizes the possibilities:\n```\nBad box type  Glue     Additional conditions\n---------------------------------------------------------------\nOverfull      Shrink   \\vbadness < 100 or excess width > \\vfuzz\nTight         Shrink   (all other shrink cases)\nLoose         Stretch  \\vbadness < \\badness <= 100\nUnderfull     Stretch  (all other stretch cases)\n---------------------------------------------------------------\n```",
        "related": "vfuzz, badness, hbadness.",
        "descriptionshort": "is the badness above which bad vboxes are reported.",
        "type": "parameter (integer)"
    },{
        "name": "vbox",
        "synopsis": "\\vbox<box specification>{<vertical material>}",
        "description": "There are three forms of `\\vbox`: '`\\vbox` {material}', '`\\vbox` to <dimen> {material}', and '`\\vbox` spread <dimen> {material}' **[80]**. The material inside a vbox is actually a vertical list make up of boxes, kerns, glue, and other dimensionless items (e.g., marks, penalties, and whatsits). The depth of the vbox is zero, unless the last item on the vertical list is a box. If that box has depth *d*, then the depth of the vbox is min(*d*,`\\boxmaxdepth`). The natural height *h* of a vbox is the sum of the heights and depths of all the boxes in the vertical list plus the sum of all the kern items in the list plus the sum of the rigid component of all glue items in the list minus *d*. For a `\\vbox` without a *to* or *spread* component, the height of the box is just *h*. But, for a *to* vbox the height is the <dimen>, and for a *spread* vbox the height is *h* plus the <dimen>. The last two cases result in overfull or underfull boxes unless the glue in the box can shrink or expand to the actual height of the box. Only the boxes in the vertical list enter into the calculation of the width of a vbox. For each box in the list, which ends to the right of the vbox reference point, compute the distance from the reference point to the box's end. Take into account all `\\moveright` and `\\moveleft` commands that apply to the box. The width of the vbox is the maximum of the distances just computed (assuming the list contains at least one box meeting the restrictions) or it is zero **[80-81]**. Vboxes tend to have large heights and small depths in contrast to vtops which tend to have small heights and large depths **[82]**. A `\\vbox` is indecomposable. TeX will not split it between two pages **[93]**.",
        "related": "setbox, vtop, hbox, boxmaxdepth.",
        "descriptionshort": "constructs a box holding vertical material.",
        "type": "command"
    },{
        "name": "vfuzz",
        "synopsis": "\\vfuzz",
        "description": "TeX uses this parameter with `\\vbadness` in classifying a `\\vbox` or `\\vtop` which contains more material than will fit even after the glue in the box has shrunk all it can. TeX considers the box overfull if the excess width of the box is larger than `\\vfuzz` or `\\vbadness` is less than 100 **[302]**.",
        "related": "vbadness, hfuzz.",
        "descriptionshort": "is the overrun allowed before overfull vboxes are reported.",
        "type": "parameter (dimen)"
    },{
        "name": "vrule",
        "synopsis": "\\vrule[height<dimen> depth<dimen> width<dimen>]",
        "description": "A rule box is a solid black rectangular box with a height, depth, and width. Such a box may look like a horizontal or vertical line. The `\\vrule` command makes a rule box, but the command may only be used in horizontal mode. If none of the box dimensions are specified, the box has width 0.4pt, and its height and depth extend to the smallest box that encloses it. No glue is placed to the left or right of a `\\vrule` **[221]**. If `\\vrule` is used in vertical mode, a new paragraph is started, and the rule box is typeset **[222]**. However, a `\\vrule` may be used with `\\leaders` in vertical mode **[224-225]**.",
        "related": "hrule, leaders.",
        "descriptionshort": "makes a rule box in horizontal mode.",
        "type": "command"
    },{
        "name": "vtop",
        "synopsis": "\\vtop<box specification>{<vertical material>}",
        "description": "There are three forms of `\\vtop`: '`\\vtop` {material}', '`\\vtop` to <dimen> {material}', and '`\\vtop` spread <dimen> {material}'. The material inside a vtop is actually a vertical list make up of boxes, kerns, glue, and other dimensionless items (e.g., marks, penalties, and whatsits). In order to compute the dimensions of the vtop, first put the vertical list inside a `\\vbox` (with the same box specifications) and compute the vbox's height, depth, and width (*h, d, w*). Next, set *x* equal to zero unless the first item on the list is a box. In that case set *x* equal to the height of the box. Finally, the height, depth, and width of the desired `\\vtop` are: *x, h + d - x*, and *w* **[81]**. Vtops tend to have large depths and small heights in contrast to vboxes which tend to have small depths and large heights **[82]**. A `\\vtop` is indecomposable.  TeX will not split it between two pages **[93]**.",
        "related": "setbox, vbox, hbox.",
        "descriptionshort": "is an alternate way to construct a box holding vertical material.",
        "type": "command"
    },{
        "name": "wd",
        "synopsis": "\\wd<8-bit register number>",
        "description": "Every box has a width which is a <dimen> quantity. When material is placed in a box, the width of the box is automatically recomputed. The width may be accessed or changed using `\\wd`<number> **[120]**.",
        "related": "dp, ht, setbox.",
        "descriptionshort": "is the width of a box.",
        "type": "internal quantity"
    },{
        "name": "xleaders",
        "synopsis": "\\xleaders<box or rule><glue>",
        "description": "Leaders are used to fill space with a box or a rule. Normally, copies of a box will not completely fill a specified space. So, in addition to `\\leaders`, TeX provides two additional ways to put boxes in the space. The first is `\\cleaders`. It packs boxes tightly together and centers them in the specified space. The second is `\\xleaders`. It breaks the leftover space into equal pieces and puts one piece between each box and on the left and right ends of the boxes. The result is a *sbsb*\\ \\char144\\ *sbs* pattern where *s* stands for one of the pieces of space and *b* for one of the boxes **[224]**.",
        "related": "cleaders, leaders.",
        "descriptionshort": "insert expanded leaders.",
        "type": "command"
    },{
        "name": "  (control space)",
        "synopsis": "\\ ",
        "description": "In certain situations TeX ignores spaces (e.g., after a control word). In other situations it converts multiple spaces into a single space. A control space is used to force TeX to typeset a space **[8]**. A *control space* is required when using `\\nonfrenchspacing` to fix the spacing after periods which occur in the middle of a sentence **[74]**. Regular spaces and blank lines are ignored in vertical mode. However, a control space in vertical mode begins a new paragraph **[87]**. In math mode regular spaces are ignored, and a control space is required to separate words **[163]**. A control space adds the same glue to a horizontal or math list that a <space token> with space factor 1000 adds **[285 and 290]**. Plain TeX defines `\\<tab>` and `\\<return>` so they return a control space **[351]**. *Verbatim* listings often make the space character active (category 13) and set it equal to a control space **[381]**.",
        "descriptionshort": "inserts a control space.",
        "type": "command"
    },{
        "name": "accent",
        "synopsis": "\\accent<8-bit number><optional assignments>",
        "description": "This command places an accent on a character. The <8-bit number> gives the position of the accent in the current font. The accent should be at the correct position for characters whose height is the x-height of the current font. The accent is raised or lowered to fit taller or shorter characters. The width of the result is the width of the character being accented **[54]**. The <optional assignments> stands for 0 or more *assignments* **[275-278]** other than `\\setbox`. The character receiving the accent should be: a character with category code 11 or 12 (*letter* or *other*), a `\\char` or `\\chardef` token, or `\\noboundary`. If a character does not follow the assignment, the result is the same as `\\char`<8-bit number> **[286]**. Otherwise, the character is accented by the accent. After an accent TeX sets `\\spacefactor=1000` **[287]**. If `\\accent` appears in vertical mode, a new paragraph is started **[283]**. Plain TeX sets up the basic accents for Computer Modern fonts **[356]**. If another font is used which has the accents in different positions, new definitions are required **[nr]**.",
        "related": "char",
        "descriptionshort": "places an accent on a character.",
        "type": "command"
    },{
        "name": "catcode",
        "synopsis": "\\catcode<8-bit number>",
        "description": "Each of the 256 characters TeX may encounter is placed in one of 16 categories numbered 0-15 **[37]**. The command ```\\catcode`\\{=1``` assigns '`{`' to category 1 **[39]**. Category codes are changed to get verbatim listings **[380]**.\n```\nCategory  Description    Plain TeX value\n----------------------------------------\n0         Escape         \\          (92)\n1         Begin-group    {         (123)\n2         End-group      }         (125)\n3         Math shift     $          (36)\n4         Alignment tab  &          (38)\n5         End of Line    <return>   (13)\n6         Parameter      #          (35)\n7         Superscript    ^          (94)\n8         Subscript      _          (95)\n9         Ignored        <null>      (0)\n10        Space          <space>    (32)\n11        Letter         a-z A-Z    (94)\n12        Other          all others\n13        Active         ~         (126)\n14        Comment        %          (37)\n15        Invalid        <delete>  (127)\n----------------------------------------\n```",
        "related": "lccode, sfcode, uccode",
        "descriptionshort": "holds the category code for a character.",
        "type": "internal quantity"
    },{
        "name": "char",
        "synopsis": "\\char<8-bit number>",
        "description": "This command provides access to all the characters in the current font. The number should be in the range 0-255 **[43]**. It may be expressed in decimal, octal, hexadecimal, or one of several special TeX formats **[44-45]**. If `\\char` appears in vertical mode, a new paragraph is started **[283]**. The command may be used in math mode **[289]**.",
        "related": "accent, chardef, mathcode.",
        "descriptionshort": "provides access to one of the 256 characters in a font.",
        "type": "command"
    },{
        "name": "chardef",
        "synopsis": "\\chardef<control sequence>=<number>",
        "description": "This is an efficient alternate to '`\\def`<control sequence>{`\\char`<number>}' **[44]**. Control sequences defined by `\\chardef` may be used with '`\\the`'. That combination returns <number> in decimal notation **[214]**. Expansion is suppressed when TeX is reading the <control sequence> **[215]**. TeX uses hexadecimal notation when it expands '`\\meaning`<control sequence>' **[336]**.",
        "related": "char, def.",
        "descriptionshort": "provides an alternate way to define a control sequence that returns a character.",
        "type": "internal quantity"
    },{
        "name": "endlinechar",
        "synopsis": "\\endlinechar",
        "description": "TeX reads an input file a line at a time and converts the material to a sequence of tokens **[38]**. At the end of each line it deletes any spaces it finds and inserts a character token holding the current value of `\\endlinechar` **[46]**. If `\\endlinechar` is less than 0 or greater than 255, nothing is added **[48]**. The Plain TeX `\\path` macros use `\\endlinechar=-1` **[390-391]**.",
        "related": "escapechar, newlinechar.",
        "descriptionshort": "is the character added to the end of input lines.",
        "type": "parameter (integer)"
    },{
        "name": "escapechar",
        "synopsis": "\\escapechar",
        "description": "This specifies the character that should be used when a control sequence is written as text **[40]** or expanded by `\\string` **[213]**. Nothing is written if `\\escapechar` is less than 0 or greater than 255 **[308]**.",
        "related": "string, endlinechar, newlinechar.",
        "descriptionshort": "is the character used for category 0 characters when outputting control sequences.",
        "type": "parameter (integer)"
    },{
        "name": "lccode",
        "synopsis": "\\lccode<8-bit number>",
        "description": "This quantity is used by `\\lowercase` to convert a character to its lowercase equivalent **[41]**. INITEX sets ```\\lccode`A=`a``` and ```\\lccode`a=`a```\nIt makes similar assignments for all other letters. Finally, it makes the `\\lccode` of all nonletters zero **[345]**. Words added to the hyphenation dictionary are converted to lowercase. So, each nonhyphen character in the word must have a nonzero `\\lccode` **[452]**.",
        "related": "uccode, catcode, sfcode, lowercase, hyphenation.",
        "descriptionshort": "holds the lowercase value for a character.",
        "type": "internal quantity"
    },{
        "name": "lowercase",
        "synopsis": "\\lowercase{<token list>}",
        "description": "This command converts every character in the token list to its `\\lccode` value unless that value is zero in which case no change is made. The conversion is made in TeX's *stomach* **[41]**. Expansion is suppressed during the conversion **[215]**. Active characters (category 13) behave like character tokens and may be converted **[307]**.",
        "related": "lccode, uppercase.",
        "descriptionshort": "converts tokens to lowercase.",
        "type": "command"
    },{
        "name": "newlinechar",
        "synopsis": "\\newlinechar",
        "description": "A `\\write` command writes a line to a file or the terminal. If the line is too long, TeX or the operating system may be unable to write it. There are two solutions to this potential problem: break the line into several shorter ones; or give `\\newlinechar` a value and place that value at appropriate places in the line. If `\\newlinechar` is less than 0 or greater than 255, only the first solution given above may be used **[228]**. The `\\message` command often uses `\\newlinechar` to add line breaks to material written to the log file **[nr]**.",
        "related": "write, message, endlinechar, escapechar.",
        "descriptionshort": "is the character which begins a new line of output.",
        "type": "parameter (integer)"
    },{
        "name": "number",
        "synopsis": "\\number<number>",
        "description": "This command produces the decimal equivalent of <number> **[40]**. It suppresses leading zeros and may be used with internal registers or parameters **[41]**. It produces characters which have category code 12 (*other*) or 10 (*space*) **[214]**.",
        "related": "romannumeral, the.",
        "descriptionshort": "produces the decimal equivalent of numbers.",
        "type": "expandable command"
    },{
        "name": "romannumeral",
        "synopsis": "\\romannumeral<number>",
        "description": "This command converts a number to lowercase roman numerals **[41]**. The expansion is empty if the number is zero or negative **[213]**. It produces characters which have category code 12 (*other*) or 10 (*space*) **[214]**.",
        "related": "number, lowercase.",
        "descriptionshort": "converts a number to lowercase roman numerals.",
        "type": "expandable command"
    },{
        "name": "sfcode",
        "synopsis": "\\sfcode<8-bit number>",
        "description": "Each character in a font has a space factor code that is an integer between 0 and 32767. The code is used to adjust the space factor in a horizontal list. The uppercase letters A-Z have space factor code 999. Most other characters have code 1000 **[76]**. However, Plain TeX makes '`)`', '`'`', and '`]`' have space factor code 0. Also, the `\\frenchspacing` and `\\nonfrenchspacing` modes in Plain TeX work by changing the `\\sfcode` for: '`.`', '`?`', '`!`', '`:`', '`;`', and '`,`' **[351]**.",
        "related": "catcode, lccode, uccode, spacefactor.",
        "descriptionshort": "holds the space factor value for a character.",
        "type": "internal quantity"
    },{
        "name": "string",
        "synopsis": "\\string<token>",
        "description": "This command converts a single <token> into character tokens. If the token is a character or an active character, the result is the character. If the token is a control sequence, the result is `\\escapechar` followed by the characters making up the name of the control sequence. TeX reads the token without expansion **[213]**. Each resulting character, including the `\\escapechar`, receives category code 12 (*other*). Except, if a space occurs, it receives category code 10 **[40]**. The Plain TeX version of `\\newif` uses `\\string` and sets '`\\escapechar=-1`' **[348]**.",
        "related": "escapechar.",
        "descriptionshort": "converts a control sequence to characters.",
        "type": "expandable command"
    },{
        "name": "uccode",
        "synopsis": "\\uccode<8-bit number>",
        "description": "This quantity is used by `\\uppercase` to convert a character to its uppercase equivalent **[41]**. INITEX sets ```\\uccode`a=`A``` and ```\\uccode`A=`A```\nIt makes similar assignments for all other letters. Finally, it makes the `\\uccode` of all nonletters zero **[345]**.",
        "related": "lccode, catcode, sfcode, uppercase.",
        "descriptionshort": "holds the uppercase value for a character.",
        "type": "internal quantity"
    },{
        "name": "uppercase",
        "synopsis": "\\uppercase{<token list>}",
        "description": "This command converts every character in the token list to its `\\uccode` value unless that value is zero in which case no change is made. The conversion is made in TeX's *stomach* **[41]**. Expansion is suppressed during the conversion **[215]**. Active characters (category 13) behave like character tokens and may be converted **[307]**.",
        "related": "uccode, lowercase.",
        "descriptionshort": "converts tokens to uppercase.",
        "type": "command"
    },{
        "name": "batchmode",
        "synopsis": "\\batchmode",
        "description": "Normally, when TeX discovers an error in a file, it stops processing, displays a message on the terminal, and waits for instructions for what to do next. One option at this point is to press Q (run quietly). That tells TeX to continue processing without stopping if further errors arise and to suppress further output to the terminal **[31]**. If TeX encounters `\\batchmode` in a file, then it begins to process the file just as if Q was entered in response to an error. This is a global change which continues until the end of the file or until one of the other '`..mode`' commands is encountered **[32]**. Certain errors cause TeX to stop processing prematurely in `\\batchmode` (e.g., a missing file on an `\\input` statement) **[299]**.",
        "related": "errorstopmode, nonstopmode, scrollmode.",
        "descriptionshort": "acts like pressing Q in response to an error.",
        "type": "command"
    },{
        "name": "errhelp",
        "synopsis": "\\errhelp<general text>",
        "description": "This token parameter holds a message that is displayed when a user asks for help after encountering an error made by `\\errormessage` **[280]**. Plain TeX has a `\\newhelp` macro which facilitates the construction of help messages **[347]**.",
        "related": "errmessage.",
        "descriptionshort": "is text displayed on the terminal if h is pressed after an \\errmessage.",
        "type": "parameter (token)"
    },{
        "name": "errmessage",
        "synopsis": "\\errmessage<general text>",
        "description": "This command defines a custom error message written on the terminal and to the log file **[279-280]**. Tokens in the message are expanded when the message is written **[216]**. If TeX encounters the command, it interrupts processing; displays the message on the terminal and writes it to the log file; and waits for further instructions **[nr]**.",
        "related": "errhelp.",
        "descriptionshort": "displays text on the terminal and interrupts the program.",
        "type": "command"
    },{
        "name": "errorcontextlines",
        "synopsis": "\\errorcontextlines",
        "description": "This parameter controls the number of extra 2-line messages displayed on the terminal and written to the log file when TeX encounters an error. If `\\zzz` is an undefined control sequence, the number may be increased by entering '`I\\errorcontextlines=100\\zzz`' when TeX interrupts processing, displays error information, and waits for a response **[34]**.",
        "descriptionshort": "is the number of lines to display on the terminal at an error.",
        "type": "parameter (integer)"
    },{
        "name": "errorstopmode",
        "synopsis": "\\errorstopmode",
        "description": "If TeX is running in `\\batchmode`, `\\nonstopmode`, or `\\scrollmode`, this command ends that mode and causes TeX to return to its normal level of interaction when errors are encountered. Otherwise, the command has no effect **[32]**.",
        "related": "batchmode, nonstopmode, scrollmode.",
        "descriptionshort": "switches to normal interaction for processing errors.",
        "type": "command"
    },{
        "name": "meaning",
        "synopsis": "\\meaning<token>",
        "description": "This command adds characters to the output stream which describe <token> **[213]**. Each character is assigned category code 12 (*other*) except for spaces which are assigned category code 10 (*space*) **[214]**. Expansion of tokens is suppressed **[215]**. If `\\cs` is defined using `\\chardef` or `\\mathchardef`, TeX uses hexadecimal notation when it expands `\\meaning\\cs` **[336]**.",
        "related": "show.",
        "descriptionshort": "adds characters describing a token to the output stream.",
        "type": "expandable command"
    },{
        "name": "message",
        "synopsis": "\\message<general text>",
        "description": "This command writes an expanded token list on the terminal and to the log file **[217]**. The results of several messages may appear on the same line. If `\\newlinechar` is assigned a value, that character may be used to begin a new line **[228]**.",
        "related": "newlinechar.",
        "descriptionshort": "writes an expanded token list on the terminal and to the log file.",
        "type": "command"
    },{
        "name": "nonstopmode",
        "synopsis": "\\nonstopmode",
        "description": "Normally, when TeX discovers an error in a file, it stops processing, displays a message on the terminal, and waits for instructions for what to do next. One option at this point is to press R (run without stopping). That tells TeX to continue processing without stopping if further errors arise. Normal error messages continue to be written to the terminal **[31]**. If TeX encounters `\\nonstopmode` in a file, then it begins to process the file just as if R was entered in response to an error. This is a global change which continues until the end of the file or until one of the other '`..mode`' commands is encountered **[32]**.  Certain errors cause TeX to stop processing prematurely in `\\nonstopmode` (e.g., a missing file on an `\\input` statement) **[299]**.",
        "related": "batchmode, errorstopmode, scrollmode.",
        "descriptionshort": "acts like pressing R in response to an error.",
        "type": "command"
    },{
        "name": "pausing",
        "synopsis": "\\pausing",
        "description": "If `\\pausing` is given a positive value, TeX stops after every line of input is read. At that point the line may be edited. If it is, the new line is used for the remainder of the current run. No changes are written to the actual file **[303]**.",
        "descriptionshort": "if positive, the program halts after every line is read from the input file and waits for a response from the user.",
        "type": "parameter (integer)"
    },{
        "name": "scrollmode",
        "synopsis": "\\scrollmode",
        "description": "Normally, when TeX discovers an error in a file, it stops processing, displays a message on the terminal, and waits for instructions for what to do next. One option at this point is to press S (scroll future error messages). That tells TeX to continue processing without stopping if further syntax errors arise. However, TeX continues to stop for non-syntax errors (e.g., if a file is missing on an `\\input` statement). Also, TeX continues to write normal error messages to the terminal **[31]**. If TeX encounters `\\scrollmode` in a file, then it begins to process the file just as if S was entered in response to an error. This is a global change which continues until the end of the file or until one of the other '`..mode`' commands is encountered **[32]**.",
        "related": "batchmode, errorstopmode, nonstopmode.",
        "descriptionshort": "acts like pressing S in response to an error.",
        "type": "command"
    },{
        "name": "show",
        "synopsis": "\\show<token>",
        "description": "This command displays the current meaning of <token> on the terminal and writes the meaning to the log file **[10]**. The command may be entered at the keyboard when TeX is waiting for input **[299]**. But, if it appears in a file, TeX interrupts processing of the file and waits for further instructions **[nr]**.",
        "related": "meaning, showbox, showlists, showthe.",
        "descriptionshort": "writes a token's definition on the terminal and to the log file.",
        "type": "command"
    },{
        "name": "showbox",
        "synopsis": "\\showbox<8-bit number>",
        "description": "This command writes the contents of a box register to the log file **[66]**. If `\\tracingonline` is positive, it also displays the contents on the terminal **[121]**. By default at most 3 levels and 5 items per level are written. The parameters `\\showboxdepth` and `\\showboxbreadth` control the number of levels and items per level that are written **[302]**.",
        "related": "showboxbreadth, showboxdepth, showlists, show, showthe.",
        "descriptionshort": "writes the contents of a box to the log file.",
        "type": "command"
    },{
        "name": "showboxbreadth",
        "synopsis": "\\showboxbreadth=<number>",
        "description": "This parameter determines how many items per level the `\\showbox` and `\\showlists` commands write to the log file **[302]**.",
        "related": "showboxdepth, showbox, showlists.",
        "descriptionshort": "is the maximum number of items per level written by \\showbox and \\showlists.",
        "type": "parameter (integer)"
    },{
        "name": "showboxdepth",
        "synopsis": "\\showboxdepth=<number>",
        "description": "This parameter determines how many levels the `\\showbox` and `\\showlists` commands write to the log file **[302]**.",
        "related": "showboxbreadth, showbox, showlists.",
        "descriptionshort": "is the maximum level written by \\showbox and \\showlists.",
        "type": "parameter (integer)"
    },{
        "name": "showlists",
        "synopsis": "\\showlists",
        "description": "This command writes to the log file the lists that are being worked on in the current mode and in all enclosing modes where work has been suspended **[88]**. If the command is placed in the output routine, then the current page and recent contributions are written **[112]**. If `\\tracingonline` is set to a positive number, the results are also displayed on the terminal **[303]**. Finally, `\\showboxbreadth` and `\\showboxdepth` work as they do with `\\showbox` to limit the amount of material that is displayed **[302]**.",
        "related": "showboxbreadth, showboxdepth, showbox, show, showthe.",
        "descriptionshort": "writes information about current lists to the log file.",
        "type": "command"
    },{
        "name": "showthe",
        "synopsis": "\\showthe<internal quantity>",
        "description": "This command gets the value of an *internal quantity*. The result is displayed on the terminal and written to the log file **[121]**. *The TeX book* only defines <internal quantity> in an answer to an exercise **[279 and 336]**. Basically, it is one of the internal quantities **[271]** or parameters **[272-275]**.",
        "related": "show, showbox, showlists.",
        "descriptionshort": "writes a value on the terminal and to the log file and interrupts the program.",
        "type": "command"
    },{
        "name": "tracingcommands",
        "synopsis": "\\tracingcommands=<number>",
        "description": "If this parameter is positive, TeX writes every command it executes to the log file **[88]**. If it is 2 or larger, TeX also writes all conditional commands and their outcomes **[212]**. This may help reveal extra *blank spaces* which are left in a macro **[299]**. If `\\tracingonline` is positive, the commands are also displayed on the terminal **[303]**. ",
        "descriptionshort": "if positive, writes commands to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracinglostchars",
        "synopsis": "\\tracinglostchars=<number>",
        "description": "A font may not have a character in all of the 256 possible positions. If this parameter is positive, TeX writes a *missing character* message to the log file each time it encounters a character which is not defined in the current font **[301]**. If `\\tracingonline` is positive, the message is also displayed on the terminal **[303]**.",
        "descriptionshort": "if positive, writes characters not in the current font to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracingmacros",
        "synopsis": "\\tracingmacros=<number>",
        "description": "If this parameter is positive, TeX writes the expansion of each macro it encounters and the arguments for the macro to the log file. If it is 2 or larger, TeX also writes the expansion of the token lists parameters (e.g., `\\output`, `\\everypar`, `\\everymath`, ....) **[212]**. If `\\tracingonline` is positive, the material is also displayed on the terminal **[303]**.",
        "descriptionshort": "if positive, writes to the log file when expanding macros and arguments.",
        "type": "parameter (integer)"
    },{
        "name": "tracingonline",
        "synopsis": "\\tracingonline=<number>",
        "description": "If this parameter is positive, TeX displays output from the various '`\\tracing...`' commands on the terminal in addition to writing it to the log file **[303]**. On some systems this is the case for all commands, execpt `\\tracingstats` whose output is only written to the log file.",
        "descriptionshort": "if positive, writes diagnostic output to the terminal as well as to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracingoutput",
        "synopsis": "\\tracingoutput=<number>",
        "description": "If this parameter is positive when `\\shipout`<box> is encountered, TeX writes the contents of the box to the log file **[254]**. The values of `\\showboxbreadth` and `\\showboxdepth` control the amount of the box that is written **[302]**. If `\\tracingonline` is positive, TeX also displays the contents of the box on the terminal **[303]**.",
        "descriptionshort": "if positive, writes contents of shipped out boxes to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracingpages",
        "synopsis": "\\tracingpages=<number>",
        "description": "If this parameter is positive, TeX writes the page-cost calculations to the log file **[112]**. If `\\tracingonline` is positive, TeX also displays the calculations on the terminal. Some versions of TeX don't look at `\\tracingpages` **[303]**. The calculations are written a paragraph at a time. That means the calculations may be interrupted by other material that is also being written to the log file **[nr]**.",
        "descriptionshort": "if positive, writes the page-cost calculations to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracingparagraphs",
        "synopsis": "\\tracingparagraphs=<number>",
        "description": "If this parameter is positive, TeX writes the line-breaking calculations to the log file **[98]**. If `\\tracingonline` is positive, TeX also displays the calculations on the terminal. Some versions of TeX don't look at `\\tracingparagraphs` **[303]**.",
        "descriptionshort": "if positive, writes a summary of the line-breaking calculations to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracingrestores",
        "synopsis": "\\tracingrestores=<number>",
        "description": "If this parameter is positive, TeX displays items removed from the *save stack* at the end of a group. This may help track down variables which are given both local and global values **[301]**. If `\\tracingonline` is positive, TeX also displays the calculations on the terminal. Some versions of TeX don't look at `\\tracingrestores` **[303]**.",
        "descriptionshort": "if positive, writes save-stack details to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "tracingstats",
        "synopsis": "\\tracingstats=<number>",
        "description": "If this parameter is positive, TeX writes statistics about memory usage at the end of the log file. In addition if the parameter is 2 or larger, it writes a simplified version of the statistics each time it encounters a `\\shipout` command **[300]**. Some versions of TeX don't look at `\\tracingstats` **[303]**. On some systems the `\\tracingonline` parameter is ignored with `\\tracingstats`.\nThe following items are written\n```\nItem                      Description\n----------------------------------------------------------------\nBumber of strings         Names of control sequences and files\nPool size                 The characters in such names\nMain memory size          Boxes, glue, breakpoints, tokens, etc.\nHash size                 Control sequence names\nFont Memory               Font metric data\nException dictionary      Hyphenation exceptions\nInput stack size     (i)  Simultaneous input sources.\nSemantic nest size   (n)  Unfinished lists being constructed\nParameter stack size (p)  Macro parameters.\nBuffer size          (b)  Characters being read from files.\nSave size                 Values to restore at group ends.\n----------------------------------------------------------------```\n",
        "descriptionshort": "if positive, writes memory usage statistics to the log file.",
        "type": "parameter (integer)"
    },{
        "name": "closein",
        "synopsis": "\\closein<4-bit number>",
        "description": "This command is used to close a file previously opened by `\\openin`. The number used with `\\closein` should be in the range 0-15 and be the same number used with `\\openin` **[217]**.",
        "related": "openin, read.",
        "descriptionshort": "closes an auxiliary file opened for reading.",
        "type": "command"
    },{
        "name": "closeout",
        "synopsis": "\\closeout<4-bit number>",
        "description": "This command is used to close a file previously opened by `\\openout`. The number used with `\\closeout` should be in the range 0-15 and be the same number used with `\\openout` **[226]**. Unless the command is preceeded by `\\immediate`, TeX places the command in a *whatsit* item in the current list and delays closing the file until a `\\shipout` encounters the list **[227]**.",
        "related": "openout, write, immediate.",
        "descriptionshort": "closes an auxiliary file opened for writing.",
        "type": "command"
    },{
        "name": "endinput",
        "synopsis": "\\endinput",
        "description": "This command causes TeX to stop processing an `\\input` file at the end of the current line **[214]**. This provides a way for a macro file to keep from being loaded twice by a document **[383]**.",
        "related": "input.",
        "descriptionshort": "stops input from a file at the end of the current line.",
        "type": "expandable command"
    },{
        "name": "immediate",
        "synopsis": "\\immediate<write or openout or closeout>",
        "description": "Normally, the output commands `\\write`, `\\openout`, and `\\closeout` are placed in a *whatsit* item on the current list. When the list shows up in a box during a `\\shipout` operation, the whatsit item is expanded and the actual write, open, or close takes place. There are times when execution of an output command should not be deferred. It should occur at the time TeX encounters it in a document. If `\\immediate` comes just before one of the output commands, the command occurs without delay (i.e., immediately) **[227]**.",
        "related": "write, openout, closeout.",
        "descriptionshort": "performs the following output command without waiting for \\shipout.",
        "type": "command"
    },{
        "name": "input",
        "synopsis": "\\input<file name>",
        "description": "When TeX encounters this command, it prepares to read from the specified file before continuing with the current source file **[214]**. Most TeX implementations add the extension `.tex` to the file name if the name does not have an extension **[217]**. If TeX can't locate the file, it writes a message to the log file and on the terminal and interrupts processing so a new name can be entered **[nr]**.",
        "related": "endinput, inputlineno.",
        "descriptionshort": "inserts a file at the current position in the source file.",
        "type": "expandable command"
    },{
        "name": "inputlineno",
        "synopsis": "\\inputlineno",
        "description": "This quantity holds the line number of the current line in the current source file **[\\*304 *TeX : The Program*]**.",
        "related": "input.",
        "descriptionshort": "holds the line number of the line last read in the current input file.",
        "type": "internal quantity"
    },{
        "name": "openin",
        "synopsis": "\\openin<4-bit number>=<file name>",
        "description": "This command opens a file for input. The file may then be read a line at a time using `\\read` or a test may be made which will tell if the file actually exists or not. The *number* must be between 0 and 15. Plain TeX has a `\\newread` command which allocates input numbers **[216]**. Most TeX implementations add the extension '`.tex`' to the file name if the name does not have an extension. If the file cannot be found, TeX does not issue an error message. The `\\closein` command closes the file **[217]**.",
        "related": "closein, read, input.",
        "descriptionshort": "opens an auxiliary file for reading.",
        "type": "command"
    },{
        "name": "openout",
        "synopsis": "\\openout<4-bit number>=<file name>",
        "description": "This command opens a file for output. The *number* must be between 0 and 15. Most TeX implementations add the extension '`.tex`' to the file name if the name does not have an extension. The `\\closeout` command closes the file **[226]**. Plain TeX has a `\\newwrite` command which allocates output numbers. Unless `\\openout` is preceeded by `\\immediate`, TeX places the command in a *whatsit* item in the current list and delays opening the file until a `\\shipout` encounters the list. TeX preserves the order of output commands unless insertions or something similar cause boxes to be written out of order **[227]**. An `\\openout` whatsit, which occurs in a box governed by leaders, is ignored **[228]**.",
        "related": "closeout, write, immediate.",
        "descriptionshort": "opens an auxiliary file for writing.",
        "type": "command"
    },{
        "name": "output",
        "synopsis": "\\output{<token list>}",
        "description": "Each time TeX completes a page, it puts the page in `\\box255` and calls the current `\\output` routine. Normally, the output routine adds a page header and footer, positions insertions such as footnotes, and maintains the current page number. However, if no output routine is specified or the <token list> is empty, TeX uses the default routine '`\\shipout \\box255`' which writes the page to the `dvi` file without a header, footer, or page number. TeX automatically begins a new level of grouping when it starts the output routine **[253]**. Just before the output routine begins, TeX sets `\\insertpenalties` to the number of insertions that were held over to the next page. Also, it sets `\\outputpenalty` to the penalty at the breakpoint used to make the page **[254]**. Finally, TeX increases `\\deadcycles` by 1 and checks if `\\deadcycles` is larger than `\\maxdeadcycles`. If it is, TeX writes an error message to the log file and uses the default output routine.  At the end of the output routine TeX complains if `\\box255` is not empty. Also, it complains if `\\box255` is not empty when it puts the newly completed page in that box just before the output routine starts **[255]**.",
        "related": "shipout, outputpenalty, insertpenalties, deadcycles.",
        "descriptionshort": "holds the token list used to typeset one page.",
        "type": "parameter (token)"
    },{
        "name": "read",
        "synopsis": "\\read<number> to <control sequence>",
        "description": "This command reads material from a file or from the terminal. Normally, TeX reads a single line for each `\\read`. However, if the number of left and right braces on the line are different, TeX reads additional lines until the same number of braces are found. TeX reads from a file if the file associated with *number* is open and has unread material in it. Otherwise, TeX reads from the terminal. When TeX reads from the terminal, it displays the <control sequence> on the terminal as a prompt unless <number> is negative **[217]**. Expansion of tokens is suppressed when TeX is reading tokens for <control sequence> **[215]**.",
        "related": "openin, closein.",
        "descriptionshort": "reads one or more lines from an auxiliary file.",
        "type": "command"
    },{
        "name": "shipout",
        "synopsis": "\\shipout<box>",
        "description": "This command writes <box> to the `dvi` file. Normally, the command appears in the output routine, and the <box> is `\\box255`, but the command may be used at any time with any box. TeX writes the non-zero values of `\\count0` through `\\count9` to the log file and the terminal when it ships out a box **[254]**. After every `\\shipout`, TeX sets `\\deadcycles` to zero **[255]**. If `\\tracingstats` is 2 or larger, TeX writes memory usage statistics to the log file each time it does a `\\shipout` **[300]**.",
        "related": "output, deadcycles, tracingstats.",
        "descriptionshort": "sends the contents of a box to the dvi file.",
        "type": "command"
    },{
        "name": "special",
        "synopsis": "\\special{<token list>}",
        "description": "This command immediately expands the <token list> and places it in a *whatsit*. When the page containing the whatsit is written by `\\shipout` to the `dvi` file, the expanded material is written directly to that file **[228]**. The program which converts `dvi` output to printer or display output (e.g., `dvips`) should be able to use the extra material (e.g., to display an `eps` file or rotate text) or to ignore it **[229]**.",
        "related": "write.",
        "descriptionshort": "sends material to the dvi file for special processing.",
        "type": "command"
    },{
        "name": "write",
        "synopsis": "\\write<number>{<token list>}",
        "description": "This command writes one or more lines to a file or the terminal. If <number> corresponds to a file opened by `\\openout` that is not yet closed, the output goes to that file. Otherwise, the output is written to the log file and, if number is non-negative, to the terminal **[226]**. Unless `\\immediate` preceeds `\\write`, TeX puts the command in a *whatsit* item in the current list. Then, the write takes place later during any `\\shipout` which applies to the list **[227]**. The token list is expanded when it is actually written to the file not when it is placed in the whatsit **[215]**. However, tokens in the list preceeded by `\\noexpand` are not expanded **[377]**. The token list should contain the same number of left and right braces **[280]**. TeX puts a *newline* character at the end of every `\\write` command. TeX ignores the command if it appears in a box governed by leaders **[228]**.",
        "related": "immediate, openout, closeout.",
        "descriptionshort": "writes material to an auxiliary file.",
        "type": "command"
    },{
        "name": "/ (italic correction)",
        "synopsis": "\\/ ",
        "description": "Every character in every font has a dimension called the *italic correction*. For most characters and most fonts that dimension is zero. But fonts that slant (e.g., an italics font) may have many characters with a nonzero dimension. In horizontal mode '`\\/`' means ''add an explicit kern using the italic correction for the preceeding character or ligature to the current list'' **[14 and 287]**. But in math mode '`\\/`' adds a kern of width zero to the current list **[292]**.",
        "related": "font.",
        "descriptionshort": "inserts an italic correction.",
        "type": "command"
    },{
        "name": "font",
        "synopsis": "\\font<control sequence>=<file name><at clause>",
        "description": "This command has three forms: a) '`\\font\\cs=filename`'; b) '`\\font\\cs=filename` at <dimen>'; and c) '`\\font\\cs=filename` scaled <number>'. The *at* form supplies the desired size. TeX divides the *number* provided with the *scaled* form by 1000 and uses the result as a scaling factor (e.g., 1200 results in 1.2 and 2000 results in 2). The exact form of *filename* depends on the operating system used with TeX **[16]**. If `\\font` is used with `\\fontname`, it denotes the current font **[213]**. Expansion of tokens is suppressed when TeX is reading a control sequence defined by `\\font` **[215]**. If TeX runs out of font memory, it prints a message and quits prematurely **[300]**. TeX allows a document to load at most 256 fonts. Once a font is loaded there appears to be no way to *unload* the font and reuse the space **[nr]**.",
        "related": "fontname, fontdimen, textfont, scriptfont, scriptscriptfont, tracingstats.",
        "descriptionshort": "loads information about a font into TeX's memory.",
        "type": "internal quantity"
    },{
        "name": "fontdimen",
        "synopsis": "\\fontdimen<parameter number><font>=<dimen>",
        "description": "Every font which TeX uses is required to have at least seven `\\fontdimen` parameters **[433]**. In addition, a math symbol font must have at least 22 parameters and math extension fonts must have at least 13 **[433 and 447]**. Computer Modern fonts have all necessary parameters defined. PostScript fonts have the necessary seven **[nr]**.",
        "related": "font.",
        "descriptionshort": "holds font parameters.",
        "type": "internal quantity"
    },{
        "name": "fontname",
        "synopsis": "\\fontname<font>",
        "description": "This command returns the system file name for <font> which should be: an identifier defined by `\\font`; `\\textfont`<number>, `\\scriptfont`<number>, or `\\scriptscriptfont` <number>; or `\\font` which denotes the current font **[213]**.",
        "related": "font.",
        "descriptionshort": "returns the system file name for a font.",
        "type": "expandable command"
    },{
        "name": "nullfont",
        "synopsis": "\\nullfont",
        "description": "This quantity stands for a *font* with no characters. It is present in every document **[14]**. In math mode TeX works with up to sixteen font families each containing three fonts. TeX sets each undefined family member to `\\nullfont` **[153]**. This font comes with the seven required `\\fontdimen` parameters (each is zero). Additional parameters may be assigned provided no other fonts have been loaded **[433]**.",
        "related": "font, fontdimen.",
        "descriptionshort": "is a predefined font with no characters.",
        "type": "internal quantity"
    },{
        "name": "hfil",
        "synopsis": "\\hfil",
        "description": "This command is essentially equivalent to: '`\\hskip 0pt plus 1fil`' **[72]**. If `\\hfil` appears in vertical mode, a new paragraph is started **[283]**. It appends horizontal glue to horizontal **[285]** and math **[290]** lists. It is used behind the scenes with `\\over` **[142]** and `\\matrix` **[177]** to center material. Also, the Plain TeX macro `\\displaylines` uses `\\hfil` to center each line in the display **[194]**.",
        "related": "hskip, hfill, hfilneg, hss.",
        "descriptionshort": "inserts first order infinitely stretchable horizontal glue in a horizontal or math list.",
        "type": "derived command"
    },{
        "name": "hfill",
        "synopsis": "\\hfill",
        "description": "This command is essentially equivalent to: '`\\hskip 0pt plus 1fill`' **[72]**. If `\\hfill` appears in vertical mode, a new paragraph is started **[283]**. It appends horizontal glue to horizontal **[285]** and math **[290]** lists. It may be used with `\\over` **[142]**, `\\matrix` **[177]**, and `\\displaylines` **[194]** to place material flush left or right.",
        "related": "hskip, hfil, hfilneg, hss.",
        "descriptionshort": "inserts second order infinitely stretchable horizontal glue in a horizontal or math list.",
        "type": "derived command"
    },{
        "name": "hfilneg",
        "synopsis": "\\hfilneg",
        "description": "This command is essentially equivalent to: '`\\hskip 0pt plus -1fil`'. It cancels the stretchability of `\\hfil` **[72]**. If `\\hfilneg` appears in vertical mode, a new paragraph is started **[283]**. It appends horizontal glue to horizontal **[285]** and math **[290]** lists.",
        "related": "hskip, hfill, hfil, hss.",
        "descriptionshort": "cancels the stretchability of \\hfil.",
        "type": "derived command"
    },{
        "name": "hskip",
        "synopsis": "\\hskip<glue>",
        "description": "This command inserts glue in horizontal **[285]** or math **[290]** mode. It is used with fil and fill to make `\\hfil` and `\\hfill`. It should not be used with math glue **[168]**. If `\\hskip` appears in vertical mode, a new paragraph is started **[283]**. Although filll exists, `\\hfilll` is not a primitive **[72]**.",
        "related": "hfil, hfill, hfilneg, hss, mskip, vskip, kern.",
        "descriptionshort": "inserts horizontal glue in a horizontal or math list.",
        "type": "command"
    },{
        "name": "hss",
        "synopsis": "\\hss",
        "description": "This command is essentially equivalent to: '`\\hskip 0pt plus 1fil minus 1fil`' **[72]**. If it appears in vertical mode, a new paragraph is started **[283]**. It appends horizontal glue to horizontal **[285]** and math **[290]** lists. It is used in the Plain TeX macro `\\rlap` **[82]**.",
        "related": "hskip, hfil.",
        "descriptionshort": "inserts infinitely stretchable and shrinkable horizontal glue in a horizontal or math list.",
        "type": "derived command"
    },{
        "name": "lastskip",
        "synopsis": "\\lastskip",
        "description": "If the last item on the current list is glue or muglue, `\\lastskip` is the amount of that glue; otherwise `\\lastskip` is 0.0pt.  The glue item itself is not removed from the list by `\\lastskip` **[214]**. The `\\unskip` command does that **[280]**. Unfortunately, there is not an '`if...`' test which compares two glue values. That makes it difficult to breakup boxes containing glue with stretchable or shrinkable compontents **[nr]**.",
        "related": "unskip, lastbox, lastkern, lastpenalty.",
        "descriptionshort": "is 0.0 pt or the last glue or muglue on the current list.",
        "type": "internal quantity"
    },{
        "name": "unskip",
        "synopsis": "\\unskip",
        "description": "If the last item on the current list is glue, `\\unskip` removes it; otherwise `\\unskip` has no effect **[222]**. The command may not be used in vertical mode if the main vertical list-so-far has been entirely contributed to the current page **[280]**. However, `\\vskip-\\lastskip` has almost the same effect **[223]**.",
        "related": "lastskip, unkern, unpenalty.",
        "descriptionshort": "removes a glue item from the current list.",
        "type": "command"
    },{
        "name": "vfil",
        "synopsis": "\\vfil",
        "description": "This command is essentially equivalent to: '`\\vskip 0pt plus 1fil`' **[72]**. If `\\vfil` appears in unrestricted horizontal mode, the current paragraph ends. It is not allowed in restricted horizontal mode **[286]**. It appends vertical glue to vertical lists **[281]**. It is used with `\\vfilneg` in the Plain TeX macro `\\filbreak` **[111]**.",
        "related": "vskip, vfill, vfilneg, vss.",
        "descriptionshort": "inserts first order infinitely stretchable vertical glue in a vertical list.",
        "type": "derived command"
    },{
        "name": "vfill",
        "synopsis": "\\vfill",
        "description": "This command is essentially equivalent to: '`\\vskip 0pt plus 1fill`' **[72]**. If `\\vfill` appears in unrestricted horizontal mode, the current paragraph ends. It is not allowed in restricted horizontal mode **[286]**. It appends vertical glue to vertical lists **[281]**. It is often used to fill a page with white space just before an `\\eject` **[24]**.",
        "related": "vskip, vfil, vfilneg, vss.",
        "descriptionshort": "inserts second order infinitely stretchable vertical glue in a vertical list.",
        "type": "derived command"
    },{
        "name": "vfilneg",
        "synopsis": "\\vfilneg",
        "description": "This command is essentially equivalent to: '`\\vskip 0pt plus -1fil`' **[72]**. If `\\vfilneg` appears in unrestricted horizontal mode, the current paragraph ends. It is not allowed in restricted horizontal mode **[286]**. It appends vertical glue to vertical lists **[281]**.",
        "related": "vskip, vfill, vfil, vss.",
        "descriptionshort": "cancels the stretchability of \\vfil.",
        "type": "derived command"
    },{
        "name": "vskip",
        "synopsis": "\\vskip<glue>",
        "description": "This command inserts glue in vertical mode. It is used with fil and fill to make `\\vfil` and `\\vfill`. Although filll exists, `\\vfilll` is not a primitive **[72]**. If `\\vskip` appears in unrestricted horizontal mode, the current paragraph ends. It is not allowed in restricted horizontal mode **[286]**.",
        "related": "vfil, vfill, vfilneg, vss, hskip, kern.",
        "descriptionshort": "inserts vertical glue in a vertical list.",
        "type": "command"
    },{
        "name": "vss",
        "synopsis": "\\vss",
        "description": "This command is essentially equivalent to: '`\\vskip 0pt plus 1fil minus 1fil`' **[72]**. If `\\vss` appears in unrestricted horizontal mode, the current paragraph ends. It is not allowed in restricted horizontal mode **[286]**. It appends vertical glue to vertical lists **[281]**.",
        "related": "vskip, vfil.",
        "descriptionshort": "insert infinitely stretchable and shrinkable vertical glue in a vertical list.",
        "type": "derived command"
    },{
        "name": "- (discretionary hyphen)",
        "synopsis": "\\- ",
        "description": "A discretionary hyphen inserts '`\\discretionary{\\char h}{}{}`' into a horizontal or math list, provided that *h*, the `\\hyphenchar` of the current font, is between 0 and 255. Otherwise, it inserts '`\\discretionary{}{}{}`' into the list **[455]**. If the command occurs in vertical mode, it starts a new paragraph **[283]**. TeX can break a compound word at an existing hyphen, but it does not apply its hyphenation routine to such words. So, a discretionary hyphen may be required to prevent a bad line break. For example `mass-produced' might need to be changed to `mass-pro\\-duced' **[96]**.",
        "related": "discretionary, hyphenchar.",
        "descriptionshort": "inserts a discretionary hyphen.",
        "type": "derived command"
    },{
        "name": "defaulthyphenchar",
        "synopsis": "\\defaulthyphenchar=<number>",
        "description": "When TeX loads a new font, it sets the `\\hyphenchar` of the font to this value **[273]**. The Plain TeX value is 45 which is the ASCII value of a hyphen '-' **[348]**. Once a font is loaded, a new assignment may be made. For example, the `manmac` format sets '`\\hyphenchar \\tentt=-1`' **[414]**. This prevents hyphenation of the control sequence names and keywords which appear in *The TeX book* **[454]**. Setting '`\\defaulthyphenchar=-1`' at the top of a document disables hyphenation for the document **[nr]**.",
        "related": "hyphenchar.",
        "descriptionshort": "is the \\hyphenchar value to use when a new font is loaded.",
        "type": "parameter (integer)"
    },{
        "name": "discretionary",
        "synopsis": "\\discretionary{<pre-break text>}{<post-break text>}{<no-break text>}",
        "description": "A *discretionary break* consists of three sequences of characters: the pre-break, post-break, and no-break text. This command makes it possible to insert a discretionary break at any point in a paragraph **[95]**. Discretionary breaks are important because they are one of the five places where TeX breaks lines when it is making paragraphs **[96]**. If this command occurs in one of the vertical modes, it starts a new paragraph **[283]**. In math mode the no-break text must produce an empty list **[292]**. The text should contain only characters, ligatures, kerns, boxes, and rules. It should not have penalties or glue. The space factor is not changed after a discretionary **[287]**. In unrestricted horizontal mode a `\\discretionary{}{}{}` is added after a character whose code is the `\\hyphenchar` of its font (e.g., '-') and after a ligature formed from a sequence which ends with such a character (e.g., an endash or emdash) **[286]**.",
        "related": "- (discretionary hyphen), hyphenchar, hyphenation.",
        "descriptionshort": "specifies a discretionary break in a paragraph.",
        "type": "command"
    },{
        "name": "hyphenation",
        "synopsis": "This command adds a set of hyphenated words to the exception dictionary for the current language. For example, the `manmac` format says: '`\\hyphenation {man-u-script man-u-scripts ap-pen-dix}`' **[452]**. The exception dictionary is global. If a word is placed in the dictionary more than once, the last addition is the one used **[453]**.",
        "related": "patterns, language.",
        "descriptionshort": "adds words to the hyphenation exception dictionary for the current language.",
        "type": "command"
    },{
        "name": "hyphenchar",
        "synopsis": "\\hyphenchar<font>=<number>",
        "description": "When TeX loads a new font, it sets the `\\hyphenchar` of the font to the value of `\\defaulthyphenchar` **[273]**. After a font is loaded, its `\\hyphenchar` may, if necessary, be changed. For example, the `manmac` format sets `\\hyphenchar` to -1 for each typewriter font it uses. This prevents hyphenation of control sequence names and keywords in *The TeX book* **[414]**, because hyphenation of a word is not attempted unless the font used for the first letter of the word has a `hyphenchar` between 0 and 255 **[454]**. Most fonts set `\\hyphenchar` to a hyphen '-' **[351]**.  In unrestricted horizontal mode a `\\discretionary{}{}{}` is added after a character whose code is the `\\hyphenchar` of its font (e.g., the '-' in pre-break) and after a ligature formed from a sequence which ends with such a character (e.g., an endash or emdash) **[286]**. Changes to `\\hyphenchar` are global **[nr]**.",
        "related": "defaulthyphenchar, discretionary.",
        "descriptionshort": "holds the current hyphen character used with hyphenation.",
        "type": "internal quantity"
    },{
        "name": "language",
        "synopsis": "\\language=<number>",
        "description": "TeX can store hyphenation patterns and exceptions for up to 256 different languages. Then, it can apply an appropriate set of hyphenation rules for each paragraph or part of a paragraph in a ms. When TeX begins a new paragraph, it sets the *current language* to `\\language`. Just before it adds each new character to the paragraph in unrestricted horizontal mode, it compares the current language to `\\language`. If they are different, TeX : a) changes the current language to `\\language`; b) inserts a *whatsit* containing the new language and the values of `\\lefthyphenmin` and `\\righthyphenmin`; and c) inserts the character. The `\\setlanguage` command should be used to change languages in restricted horizontal mode (i.e., inside an `\\hbox`). If <number> is less than 0 or greater than 255, 0 is used **[455]**. Plain TeX has a `\\newlanguage` command which may be used to allocate numbers for languages **[347]**.  Changes made to `\\language` are local to the group containing the change **[nr]**.",
        "related": "setlanguage, hyphenation, patterns, lefthyphenmin, righthyphenmin.",
        "descriptionshort": "selects a language to use with hyphenation and \\patterns.",
        "type": "parameter (integer)"
    },{
        "name": "lefthyphenmin",
        "synopsis": "\\lefthyphenmin=<number>",
        "description": "This parameter holds the minimum number of characters that must appear at the beginning of a hyphenated word (i.e., before the '-'). In particular, TeX will not hyphenate words with fewer than `\\lefthyphenmin` + `\\righthyphenmin` characters **[454]**. The *whatsit* made by a change to `\\language` includes the current value of `\\lefthyphenmin` **[455]**. Changes made to `\\lefthyphenmin` are local to the group containing the change **[nr]**.",
        "related": "righthyphenmin, language.",
        "descriptionshort": "is the minimum number of characters that must appear before the first hyphen in an hyphenated word.",
        "type": "parameter (integer)"
    },{
        "name": "patterns",
        "synopsis": "\\patterns{<patterns>}",
        "description": "This command should only be used in INITEX. It replaces the current set of hyphenation patters for the current language with <patterns> **[453]**. It generates an error in a *production* version of TeX **[nr]**.",
        "related": "hyphenation, language.",
        "descriptionshort": "is used in INITEX to add patterns to the pattern dictionary for the current language.",
        "type": "command"
    },{
        "name": "righthyphenmin",
        "synopsis": "\\righthyphenmin=<number>",
        "description": "This parameter holds the minimum number of characters that must appear at the end of a hyphenated word (i.e., after the '-'). In particular, TeX will not hyphenate words with fewer than `\\lefthyphenmin` + `\\righthyphenmin` characters **[454]**. The *whatsit* made by a change to `\\language` includes the current value of `\\righthyphenmin` **[455]**. Changes made to `\\righthyphenmin` are local to the group containing the change **[nr]**.",
        "related": "lefthyphenmin, language.",
        "descriptionshort": "is the minimum number of characters that must appear after the last hyphen in an hyphenated word.",
        "type": "parameter (integer)"
    },{
        "name": "setlanguage",
        "synopsis": "\\setlanguage<number>",
        "description": "This command is used in restricted horizontal mode to work with several different languages. It changes the *current language* and makes the language *whatsit*, but it does not change `\\language`. If <number> is negative or greater than 255, zero is used **[455]**.",
        "related": "language, lefthyphenmin, righthyphenmin.",
        "descriptionshort": "inserts a language whatsit in restricted horizontal mode.",
        "type": "command"
    },{
        "name": "uchyph",
        "synopsis": "\\uchyph",
        "description": "TeX does not try to hyphenate words whose first character is uppercase (i.e., is equal to its own `\\uccode`) unless this parameter is positive **[454]**. Changes made to `\\uchyph` are local to the group containing the change **[nr]**.",
        "related": "uccode.",
        "descriptionshort": "prevents hyphenation of uppercase words unless this is positive.",
        "type": "parameter (integer)"
    },{
        "name": "holdinginserts",
        "synopsis": "\\holdinginserts=<number>",
        "description": "If this parameter is positive, when the current page is placed in `\\box255` and sent to the output routine, all insertions are held in their places (i.e., the `\\box` for each class of insertions is left empty) **[125]**.",
        "related": "insert.",
        "descriptionshort": "is positive if insertions should remain dormant when \\output is called.",
        "type": "parameter (integer)"
    },{
        "name": "insert",
        "synopsis": "\\insert<8-bit number>{<vertical mode material>}",
        "description": "Most of the time TeX works sequentially typesetting material across lines and down the page. However, there are times when material needs to be repositioned. For example, footnotes appear at the bottom of a page; endnotes appear at the end of an article or chapter; and a figure may float to the top of the current or the next page. *Insertions* provide such flexibility. There are 255 classes of insertions: `\\insert0` to `\\insert254`. Plain TeX provides a `\\newinsert` command. It or something similar should be used to define a new class because each class requires a `\\box`, `\\count`, `\\dimen`, and `\\skip` register and all the registers must use the same number used by the class. TeX keeps all insertions of the same class together in the order they were made. For a particular class, say `\\insert100`, `\\box100` is made available to the output routine and holds the insertions made to `\\insert100`; `\\dimen100` holds the maximum height plus depth allowed for `\\box100` on any single page; `\\skip100` is the amount of extra space the output routine adds when it positions `\\box100` on the page; and `\\count100` holds the magnification factor used with insertions in `\\insert100`. For example, let *x* be the height plus depth of some `\\insert100` and let *y* be the actual change in `\\pagetotal` of the insertions. Then, `\\count100` = 1000(*y/x*). For footnotes *y* is usually *x*, and `\\count100` = 1000. But for endnotes or material destined for the margin, *y* = 0 as does `\\count100`. The actual steps used to prepare `\\box100` are described on pages 123-124 of *The TeX book*. If there is more material in `\\insert100` than will fit on the current page, part of the material is split (using `\\vsplit`, `\\splittopskip`, and `\\splitmaxdepth`) and placed in `\\box100`. The rest of the material is saved for the next page **[122-123]**. An insertion will appear on a page only if it appears on TeX's main vertical list **[281]**. Since `\\box255` is reserved for use by TeX and the output routine, `\\insert255` is not allowed **[280]**.",
        "related": "holdinginserts, floatingpenalty, insertpenalties, vsplit.",
        "descriptionshort": "places material into an insertions class.",
        "type": "command"
    },{
        "name": "insertpenalties",
        "synopsis": "\\insertpenalties",
        "description": "This quantity holds two different values. In the ouput routine `\\insertpenalties` holds the total number of held-over insertions. For each class of insertions this includes the unused part of a split insertion and all other insertions which don't appear on the current page **[125 and 254]**. In the page-making routine `\\insertpenalties` holds the total of the `\\floatingpenalty` for each unsplit insertion which is carried over to the next page **[111 and 123]**.",
        "related": "floatingpenalty, insert.",
        "descriptionshort": "is a quantity used by TeX in two different ways.",
        "type": "internal quantity"
    },{
        "name": "splitbotmark",
        "synopsis": "\\splitbotmark",
        "description": "This command holds the mark text of the last mark in material split off by the most recent `\\vsplit` command. It is null unless the material contains one or more marks. The value of `\\splitbotmark` is global (i.e., it is not affected by grouping) **[259]**.",
        "related": "mark, splitfirstmark, vsplit.",
        "descriptionshort": "is the mark text of the last mark in the most recent \\vsplit operation.",
        "type": "command"
    },{
        "name": "splitfirstmark",
        "synopsis": "\\splitfirstmark",
        "description": "This command holds the mark text of the first mark in material split off by the most recent `\\vsplit` command. It is null unless the material contains one or more marks. The value of `\\splitfirstmark` is global (i.e., it is not affected by grouping) **[259]**.",
        "related": "mark, splitbotmark, vsplit.",
        "descriptionshort": "is the mark text of the first mark in the most recent \\vsplit operation.",
        "type": "command"
    },{
        "name": "splitmaxdepth",
        "synopsis": "\\splitmaxdepth=<dimen>",
        "description": "The operation `\\setbox100=\\vsplit99 to 60pt` uses the *page-breaking* routine with a page goal of 60 points to move material from `\\box99` to `\\box100`. In the normal page-breaking routine the parameter `\\maxdepth` controls the maximum depth of boxes placed on the page. The `\\splitmaxdepth` parameter serves the same function in the page-breaking routine used with `\\vsplit` **[124]**. The parameter `\\splitmaxdepth` often appears in the <vertical mode material> used with `\\insert`. Then, if the insertion needs to be split, `\\vsplit` uses the last value of `\\splitmaxdepth` in the *material* **[281]**.",
        "related": "vsplit, splittopskip, insert.",
        "descriptionshort": "is the maximum depth of boxes created by \\vsplit.",
        "type": "parameter (dimen)"
    },{
        "name": "splittopskip",
        "synopsis": "\\splittopskip=<glue>",
        "description": "At the conclusion of a `\\vsplit` operation, the box being split may be empty. If it is not, `\\splittopskip` glue is placed at the top of the box. This is similar to the `\\topskip` glue placed at the top of `\\box255` **[124]**. The parameter `\\splittopskip` often appears in the <vertical mode material> used with `\\insert`. Then, if the insertion needs to be split, `\\vsplit` uses the last value of `\\splittopskip` in the *material* **[281]**.",
        "related": "vsplit, splitmaxdepth, insert.",
        "descriptionshort": "is special glue placed inside the box created by \\vsplit.",
        "type": "parameter (glue)"
    },{
        "name": "vsplit",
        "synopsis": "\\vsplit<8-bit register number> to <dimen>",
        "description": "The command '`\\setbox`*m*=`\\vsplit`*n* to <dimen>' splits a box into two pieces. The original box (i.e., `\\box`*n*) should be a vbox and hold a vertical list. The maximum depth of the new box (i.e., `\\box`*m*) is `\\splitmaxdepth`. After the breakpoint in `\\box`*n* is determined, items in the list are moved to `\\box`*m*. Next, the same items are removed from `\\box`*n*. Also, all discardable items immediately following the breakpoint are removed from `\\box`*n*. Finally, the glue specified by `\\splittopskip` is added to the top of `\\box`*n* **[124]**.",
        "related": "splitmaxdepth, splittopskip, splitbotmark, splitfirstmark, insert.",
        "descriptionshort": "removes a specified amount of material from a box register.",
        "type": "command"
    },{
        "name": "day",
        "synopsis": "\\day",
        "description": "At the beginning of each job TeX sets this parameter to the current day (1-31) in the month **[349]**.",
        "related": "month, year, time.",
        "descriptionshort": "holds the current day of the month (1-31).",
        "type": "parameter (integer)"
    },{
        "name": "deadcycles",
        "synopsis": "\\deadcycles",
        "description": "This holds the number of times the output routine was performed since the last `\\shipout`. It is set to zero after every `\\shipout`, and it is increased by 1 just before every `\\output` **[255]**.",
        "related": "maxdeadcycles, output, shipout, end.",
        "descriptionshort": "is the number of times \\output was called since the last \\shipout.",
        "type": "internal quantity"
    },{
        "name": "dump",
        "synopsis": "\\dump",
        "description": "In INITEX this outputs a format file that can be loaded at high speed to restore the current status. In production versions of TeX , `\\dump` acts like `\\end` **[283]**.",
        "related": "end, everyjob.",
        "descriptionshort": "outputs a format file in INITEX; otherwise it is equivalent to \\end.",
        "type": "command"
    },{
        "name": "end",
        "synopsis": "\\end",
        "description": "Normally, the last command in a document is `\\end` **[87]**. It ends the current job only if the main vertical list is empty and `\\deadcycles=0`. If either condition is not true, TeX inserts '`\\hbox to \\hsize{} \\vfill \\penalty-'10000000000`' into the main vertical list and then prepares to reread the `\\end` (the penalty is in octal and is -2^{30}). Generally, this is sufficient to *flush out* all remaining output **[264]**. The command is not allowed in internal vertical mode **[283]** or restricted horizontal mode. In horizontal mode TeX ends the current paragraph and then rereads `\\end` **[286]**.",
        "related": "deadcycles, dump.",
        "descriptionshort": "terminates the current job.",
        "type": "command"
    },{
        "name": "everyjob",
        "synopsis": "\\everyjob{<token list>}",
        "description": "This parameter holds a list of tokens which is inserted at the start of every job **[275]**. The only example of `\\everyjob` in *The Texbook* uses it with `\\dump` and hense with INITEX **[336]**.",
        "related": "dump.",
        "descriptionshort": "holds tokens which are inserted at the start of every job.",
        "type": "parameter (token)"
    },{
        "name": "jobname",
        "synopsis": "\\jobname",
        "description": "If TeX is processing a document whose name is `fname.tex`, then `\\jobname` expands to `fname` **[213]**. Each character in the expansion receives category code 12 (*other*), except for spaces which receive code 10 (*space*) **[214]**.",
        "descriptionshort": "is the underlying file name for a job.",
        "type": "expandable command"
    },{
        "name": "mag",
        "synopsis": "\\mag=<number>",
        "description": "TeX is able to process a document at different magnifications. However, if TeX is preparing `dvi` output, as it usually is, then a single magnification must be used for the whole document. The desired magnification is converted to a decimal, multiplied by 1000, and stored in the parameter `\\mag`. For example, a 20% increase becomes 1.2 and then 1200; a 50% reduction becomes 0.5 and then 500. The number assigned to `\\mag` should be between 1 and 32768 **[60]**. In order for `\\mag` to work properly, all dimensions in the document need to be prefixed by ''true'' (e.g., `\\hsize=6.5true in`). Otherwise, the material will be magnified, but part of it may spill off the edge of the page **[59-60]**.",
        "descriptionshort": "holds the magnification ratio times 1000.",
        "type": "parameter (integer)"
    },{
        "name": "maxdeadcycles",
        "synopsis": "\\maxdeadcycles=<number>",
        "description": "Each time TeX prepares to perform the output routine, it checks if `\\deadcycles` is less than `\\maxdeadcycles`. If it is, TeX increases `\\deadcycles` by 1 and performs the output routine. If it is not, TeX issues an error message and performs the default output routine '`\\shipout\\box255`' **[254-255]**.",
        "related": "deadcycles.",
        "descriptionshort": "is the maximum allowed value of \\deadcycles before an error is generated.",
        "type": "parameter (integer)"
    },{
        "name": "month",
        "synopsis": "\\month",
        "description": "At the beginning of each job TeX sets this parameter to the current month (1-12) in the year **[349]**.",
        "related": "day, year, time.",
        "descriptionshort": "holds the current month of the year (1-12).",
        "type": "parameter (integer)"
    },{
        "name": "time",
        "synopsis": "\\time",
        "description": "This parameter is set at the beginning of a job to the current time in minutes after midnight. It ranges from 0 to 1439 **[349]**.",
        "related": "day, month, year.",
        "descriptionshort": "holds the current time in minutes after midnight (0-1439).",
        "type": "parameter (integer)"
    },{
        "name": "year",
        "synopsis": "\\year",
        "description": "At the beginning of each job TeX sets this parameter to the current year (e.g., 2000) **[349]**.",
        "related": "day, month, time.",
        "descriptionshort": "holds the current year (e.g., 2000).",
        "type": "parameter (integer)"
    },{
        "name": "kern",
        "synopsis": "\\kern<dimen>",
        "description": "This command adds a kern item with the specified dimension to the current list **[280]**. A `\\kern` specifies vertical spacing in vertical mode and horizontal spacing in horizontal **[87]** or math **[168]** mode. Also, a kern is similar to glue except it cannot stretch or shrink. TeX will not break a line at a kern, unless the kern is immediately followed by glue **[75]**. The hyphenation algorithm distinguishes between *implicit* kern items (i.e., kerns inserted by TeX because of information stored with the current font) **[454]** and *explicit* kern items (i.e., ones added with `\\kern`) **[306]**.",
        "related": "hskip, vskip, mkern.",
        "descriptionshort": "adds a kern item to the current list.",
        "type": "command"
    },{
        "name": "lastkern",
        "synopsis": "\\lastkern",
        "description": "If the last item on the current list is a kern, `\\lastkern` is the amount of that kern; otherwise `\\lastkern` is 0.0pt. The kern item itself is not removed from the list by `\\lastkern` **[214]**. The `\\unkern` command does that **[280]**.",
        "related": "unkern, lastbox, lastpenalty, lastskip.",
        "descriptionshort": "is 0.0 pt or the last kern on the current list.",
        "type": "internal quantity"
    },{
        "name": "lower",
        "synopsis": "\\lower<dimen><box>",
        "description": "This command lowers (or raises with a negative <dimen>) a box on the current list. It may only be used in horizontal mode **[285]** or math mode **[290]**.",
        "related": "raise, moveleft, moveright.",
        "descriptionshort": "shifts a box down and appends it to the current horizontal or math list.",
        "type": "command"
    },{
        "name": "moveleft",
        "synopsis": "\\moveleft<dimen><box>",
        "description": "This command shifts a box left (or right if <dimen> is negative). It requires vertical mode **[80]**.",
        "related": "moveright, lower, raise.",
        "descriptionshort": "shifts a box left and appends it to the current vertical list.",
        "type": "command"
    },{
        "name": "moveright",
        "synopsis": "\\moveright<dimen><box>",
        "description": "This command shifts a box right (or left if <dimen> is negative). It requires vertical mode **[80]**.",
        "related": "moveleft, lower, raise.",
        "descriptionshort": "shifts a box right and appends it to the current vertical list.",
        "type": "command"
    },{
        "name": "raise",
        "synopsis": "\\raise<dimen><box>",
        "description": "This command raises (or lowers with a negative <dimen>) a box on the current list. It may only be used in horizontal mode **[285]** or math mode **[290]**.",
        "related": "lower, moveleft, moveright.",
        "descriptionshort": "shifts a box up and appends it to the current horizontal or math list.",
        "type": "command"
    },{
        "name": "unkern",
        "synopsis": "\\unkern",
        "description": "If the last item on the current list is a kern, `\\unkern` removes it; otherwise `\\unkern` has no effect. The command may not be used in vertical mode if the main vertical list-so-far has been entirely contributed to the current page **[280]**.",
        "related": "lastkern, unpenalty, unskip.",
        "descriptionshort": "removes a kern from the current list.",
        "type": "command"
    },{
        "name": "else",
        "synopsis": "\\else",
        "description": "This separates the *true part* of a conditional command from the *false part*. If there is no false part, the `\\else` may be omitted **[207]**. It is used with `\\ifcase` to specify the *all other cases* part of that construction **[210]**.",
        "related": "fi, ifcase, or.",
        "descriptionshort": "begins the false part of a conditional.",
        "type": "expandable command"
    },{
        "name": "fi",
        "synopsis": "\\fi",
        "description": "This command ends a conditional command begun by one of the '`\\if..`' commands **[207]**. Each '`\\if..`' command must have a matching `\\fi`. However, the nesting of '`\\if` ... `\\fi`' is independent of the nesting of `{ ... }' **[210]**.",
        "related": "else.",
        "descriptionshort": "is the concluding command of a conditional.",
        "type": "expandable command"
    },{
        "name": "if",
        "synopsis": "\\if<token1><token2>",
        "description": "TeX evaluates an `\\if` command by expanding the tokens following the `\\if` until it finds two unexpandable tokens **[209]**. Each of those tokens is either: a character (with a character code value 0-255 and a category code value 0-15) or a control sequence **[38]**. The control sequence is assigned character code 256 and category code 16. The `\\if` condition is true if the character codes of the two tokens are the same. Part of the above expansion involves replacing a token which has in turn been `*let=*' to another token by the other token **[209]**.",
        "related": "ifcat, ifx.",
        "descriptionshort": "tests if two tokens have the same character codes (i.e., values 0-256).",
        "type": "expandable command"
    },{
        "name": "ifcase",
        "synopsis": "\\ifcase<number>",
        "description": "This command begins a conditional which allows for more than two options. Its general form is: '`\\ifcase`<number><text for case 0>`\\or`<text for case 1>`\\or`...`\\or`<text for case *n*>`\\else`<text for all other cases>`\\fi`'. Here *n* is an integer greater than or equal to 0; there are *n* `\\or` statements and an optional final `\\else` which will be used only if the *number* is negative or larger than *n* **[210]**.",
        "related": "or, else, fi.",
        "descriptionshort": "begins a multi-case conditional.",
        "type": "expandable command"
    },{
        "name": "ifcat",
        "synopsis": "\\ifcat<token1><token2>",
        "description": "TeX evaluates an `\\ifcat` command by expanding the tokens following the `\\ifcat` until it finds two unexpandable tokens **[209]**. Each of those tokens is either: a character (with a character code value 0-255 and a category code value 0-15) or a control sequence **[38]**. The control sequence is assigned character code 256 and category code 16. The `\\ifcat` condition is true if the category codes of the two tokens are the same. Part of the above expansion involves replacing a token which has in turn been `*let=*' to another token by the other token **[209]**.",
        "related": "if, ifx.",
        "descriptionshort": "tests if two tokens have the same category codes (i.e., values 0-16).",
        "type": "expandable command"
    },{
        "name": "ifdim",
        "synopsis": "\\ifdim<dimen1><relation><dimen2>",
        "description": "This command compares two <dimen> values. The only *relations* are `<', `>', and `=' which mean *less than*, *greater than*, and *equal* **[209]**. Each <dimen> should be one of the following: a) a dimen or skip register (e.g., `\\dimen0` or `\\skip1`); b) an internal quantity or parameter which holds a dimension or glue (e.g., `\\hsize` or `\\ht0`); or c) an actual dimension (e.g., `2.5in` or `100pt`) **[nr]**. Glue is converted to a dimension by dropping the stretch and shrink components **[118]**.",
        "related": "ifnum.",
        "descriptionshort": "compares two dimensions.",
        "type": "expandable command"
    },{
        "name": "ifeof",
        "synopsis": "\\ifeof<4-bit number>",
        "description": "This command is true unless the input stream for <number> is open and not fully read. The number must be in the range 0-15 **[210]**.",
        "related": "openin.",
        "descriptionshort": "tests for the end of a file.",
        "type": "expandable command"
    },{
        "name": "iffalse",
        "synopsis": "\\iffalse",
        "description": "This is a conditional which is always false. Thus, any text preceeding an accompanying `\\else` will never be used **[210]**. The command is often used with `\\mark` to set up running headers for the pages of a book or an index **[260]**.",
        "related": "iftrue.",
        "descriptionshort": "is a conditional which is always false.",
        "type": "expandable command"
    },{
        "name": "ifhbox",
        "synopsis": "\\ifhbox<8-bit number>",
        "description": "This command is true if `\\box`<number> contains an hbox. The *number* must be a valid box register (i.e., from 0 to 255) **[210]**.",
        "related": "ifvbox, ifvoid.",
        "descriptionshort": "is true if a box register contains an \\hbox.",
        "type": "expandable command"
    },{
        "name": "ifhmode",
        "synopsis": "\\ifhmode",
        "description": "This command is true if TeX is in horizontal or restricted horizontal mode **[209]**.",
        "related": "ifmmode, ifvmode, ifinner.",
        "descriptionshort": "is true if TeX is in horizontal or restricted horizontal mode.",
        "type": "expandable command"
    },{
        "name": "ifinner",
        "synopsis": "\\ifinner",
        "description": "This command is true if TeX is in restricted horizontal, internal vertical, or nondisplay math mode **[209]**.",
        "related": "ifhmode, ifmmode, ifvmode.",
        "descriptionshort": "is true if TeX is in internal vertical, restricted horizontal, or nondisplay math mode.",
        "type": "expandable command"
    },{
        "name": "ifmmode",
        "synopsis": "\\ifmmode",
        "description": "This command is true if TeX is in math or display math mode **[209]**.",
        "related": "ifhmode, ifvmode, ifinner.",
        "descriptionshort": "is true if TeX is in math or display math mode.",
        "type": "expandable command"
    },{
        "name": "ifnum",
        "synopsis": "\\ifnum<number1><relation><number2>",
        "description": "This command compares two integers. The only *relations* are `<', `>', and `=' which mean *less than*, *greater than*, and *equal* **[209]**. A <dimen> value may be used as a number. It is converted to scaled points. Also, a <glue> value may be used as a <dimen>. TeX ignores the stretch and shrink components **[118]**. Each <number> should be one of the following: a) a count register (e.g., `\\count0`); b) a dimen or skip register (each is converted to a number as described above); c) an internal quantity which holds an integer, dimension, or glue (e.g., `\\year` or `\\vsize`); or d) an integer constant (e.g., 1000) **[nr]**.",
        "related": "ifodd, ifdim.",
        "descriptionshort": "compares two integers.",
        "type": "expandable command"
    },{
        "name": "ifodd",
        "synopsis": "\\ifodd<number>",
        "description": "This command is true if <number> is an odd integer and false if it is an even integer **[209]**. Since `\\ifeven` is not a primitive control sequence, using it will generate an error unless a macro package which defines it is included **[nr]**.",
        "related": "ifnum.",
        "descriptionshort": "tests for an odd integer.",
        "type": "expandable command"
    },{
        "name": "iftrue",
        "synopsis": "\\iftrue",
        "description": "This is a conditional which is always true. Thus, any text following an accompanying `\\else` will never be used **[210]**. The command is often used with `\\mark` to set up running headers for the pages of a book or an index **[260]**.",
        "related": "iffalse.",
        "descriptionshort": "is a conditional which is always true.",
        "type": "expandable command"
    },{
        "name": "ifvbox",
        "synopsis": "\\ifvbox<8-bit number>",
        "description": "This command is true if `\\box`<number> contains a vbox. The *number* must be a valid box register (i.e., from 0 to 255) **[210]**.",
        "related": "ifhbox, ifvoid.",
        "descriptionshort": "is true if a box register contains a \\vbox.",
        "type": "expandable command"
    },{
        "name": "ifvmode",
        "synopsis": "\\ifvmode",
        "description": "This command is true if TeX is in vertical or internal vertical mode **[209]**.",
        "related": "ifhmode, ifmmode, ifinner.",
        "descriptionshort": "is true if TeX is in vertical or internal vertical mode.",
        "type": "expandable command"
    },{
        "name": "ifvoid",
        "synopsis": "\\ifvoid<8-bit number>",
        "description": "This command is true if `\\box`<number> is void. The *number* must be a valid box register (i.e., from 0 to 255) **[210]**.",
        "related": "ifhbox, ifvbox.",
        "descriptionshort": "is true if a box register is void.",
        "type": "expandable command"
    },{
        "name": "ifx",
        "synopsis": "\\ifx<token1><token2>",
        "description": "When evaluating `\\ifx`, TeX does not expand the tokens which follow the `\\ifx`. Instead, the comparison is true if a) both tokens are characters with the same character and category codes; or b) both tokens represent the same TeX primitive, `\\font`, `\\chardef`, `\\countdef`, or other internal quantity; or c) both tokens are macros which have: the same status with respect to `\\long` and `\\outer`; the same parameters; and the same *top-level* expansion **[210]**.",
        "related": "if, ifcat.",
        "descriptionshort": "tests if two tokens are the same.",
        "type": "expandable command"
    },{
        "name": "or",
        "synopsis": "\\or",
        "description": "This command separates the cases in an `\\ifcase` conditional construction **[210]**.",
        "related": "ifcase, else.",
        "descriptionshort": "separates cases in an \\ifcase conditional.",
        "type": "expandable command"
    },{
        "name": "afterassignment",
        "synopsis": "\\afterassignment<token>",
        "description": "This command saves <token> (without expansion **[215]**) and inserts it back into the input after the next assignment. If two `\\afterassignment` commands occur before an assignment, only the second token is saved. If the next assignment is '`\\setbox`*n*`=\\hbox{...}`', the saved token is inserted immediately after the '`{`' just before tokens from `\\everyhbox`. Assignments made by `\\setbox` with `\\vbox` or `\\vtop` work the same way **[279]**.",
        "related": "aftergroup, expandafter, futurelet, noexpand.",
        "descriptionshort": "saves a token and inserts it after the next assignment.",
        "type": "command"
    },{
        "name": "aftergroup",
        "synopsis": "\\aftergroup<token>",
        "description": "This command saves <token> on TeX's save stack (without expansion **[215]**) and inserts it back into the input when the current group ends. If several `\\aftergroup` commands occur in a group, each of the saved tokens is inserted in the same order the commands occurred **[279]**.",
        "related": "afterassignment, expandafter, futurelet, noexpand.",
        "descriptionshort": "saves a token and inserts it after the current group is complete.",
        "type": "command"
    },{
        "name": "begingroup",
        "synopsis": "\\begingroup",
        "description": "This command begins a new level of grouping. That group must be terminated by `\\endgroup` not by `}'. The mode doesn't change **[279]**. Groups begun by `{' and `\\begingroup` must be properly nested; '`{\\begingroup}\\endgroup`' generates an error **[21]**.",
        "related": "endgroup.",
        "descriptionshort": "starts a group that must be ended by \\endgroup.",
        "type": "command"
    },{
        "name": "csname",
        "synopsis": "\\endcsname",
        "description": "A `\\csname` token must be followed by a matching `\\endcsname` token. TeX expands each of the intervening <tokens>. If only character tokens are made, TeX forms a control sequence using all the characters, but, if the expansion produces a primitive, TeX reports an error **[40]**. If the newly formed control sequence is currently undefined, it is defined to be like `\\relax` **[213]**. The commands (`\\csname` and `\\endcsname`) allow a document or formatting routine to build a control sequence token *on the fly* **[nr]**.",
        "related": "endcsname.",
        "descriptionshort": "forms a control sequence name from the characters making up a collection of tokens.",
        "type": "expandable command"
    },{
        "name": "def",
        "synopsis": "\\def<control sequence><parameter text>{<replacement text>}",
        "description": "This command is used to define a *macro*. TeX stores the *definition* (replacement text) and *expands* the macro when it encounters the macro's control sequence in a document **[199-203]**. If `\\par` occurs in one of the parameters of a macro, TeX stops processing and reports a *runaway argument* unless the macro was declared `\\long` **[205]**. A macro defined inside a group is local to that group unless the macro was declared `\\global`. A macro may be declared `\\outer` if the macro should not be allowed in: a) the argument, the parameter text, or the replacement of another macro; b) the preamble of an alignment; or c) conditional text. The three prefixes (`\\long`, `\\global`, and `\\outer`) can be applied to `\\def` in any order, and they can appear more than once **[206]**.",
        "related": "gdef, edef, xdef, global, long, outer, chardef, mathchardef, countdef, dimendef, muskipdef, skipdef, toksdef.",
        "descriptionshort": "defines a macro.",
        "type": "command"
    },{
        "name": "edef",
        "synopsis": "\\edef<control sequence><parameter text>{<replacement text>}",
        "description": "This command defines a macro whose replacement text is expanded when TeX encounters the definition, not each time TeX encounters the macro's control sequence **[215]**. However, not quite everything in the replacement text is expanded at definition time. For example, token lists produced by `\\the` and a token following `\\noexpand` are not expanded **[216]**. The three prefixes (`\\global`, `\\long`, and `\\outer`) can be applied to `\\edef` in any order, and they can appear more than once **[275]**.",
        "related": "def, xdef, global, long, outer.",
        "descriptionshort": "is similar to \\def, except control sequences in the replacement text are expanded when the definition is made.",
        "type": "command"
    },{
        "name": "endcsname",
        "synopsis": "\\endcsname",
        "description": "This command must terminate a list of tokens begun with `\\csname`. If it does, and if each of the intermediate tokens expands into characters, TeX forms a control sequence token from the characters. If there is no preceeding `\\csname` or a primitive occurs in one of the intermediate tokens, TeX reports an error **[40]**. If the newly formed control sequence is currently undefined, it is defined to be like `\\relax` **[213]**. The pair of commands (`\\csname` and `\\endcsname`) allows a document or formatting routine to build a control sequence token *on the fly* **[nr]**.",
        "related": "csname.",
        "descriptionshort": "is used with \\csname to make a control sequence name.",
        "type": "command"
    },{
        "name": "endgroup",
        "synopsis": "\\endgroup",
        "description": "This command creates an error unless TeX is in a group begun by `\\begingroup`. If it is, each item changed by a non-global assignment in the group has its pre-group value restored. Also, the group is ended, but the mode is not changed **[279]**. Groups begun by `{' and `\\begingroup` must be properly nested; '`{\\begingroup}\\endgroup`' generates an error **[21]**.",
        "related": "begingroup.",
        "descriptionshort": "ends a group that was begun by \\begingroup.",
        "type": "command"
    },{
        "name": "expandafter",
        "synopsis": "\\expandafter<token1><token2>",
        "description": "The construction '`\\expandafter`<token1><token2>' is equivalent to '<token1> *expansion of* <token2>' **[213]**. TeX does not expand <token1> until after it expands <token2> **[215]**.",
        "related": "afterassignment, aftergroup, futurelet, noexpand.",
        "descriptionshort": "'<t1><t2>' is equivalent to '<t1> *expansion of* <t2>'.",
        "type": "expandable command"
    },{
        "name": "futurelet",
        "synopsis": "\\futurelet<control sequence><token1><token2>",
        "description": "The construction '`\\futurelet\\cs=`<token1><token2>' has the effect of '`\\let\\cs=`<token2><token1><token2>' **[207]**. TeX doesn't expand tokens when it is reading the argument tokens for `\\futurelet` **[215]**.",
        "related": "let, afterassignment, aftergroup, expandafter, noexpand.",
        "descriptionshort": "'`<cs> <t1> <t2>`' is equivalent to '`\\let <cs> = <t2> <t1> <t2>`'.",
        "type": "command"
    },{
        "name": "gdef",
        "synopsis": "\\gdef<control sequence><parameter text>{<replacement text>}",
        "description": "This command is equivalent to `\\global\\def` **[206]**. The three prefixes (`\\global`, `\\long`, and `\\outer`) can be applied to `\\gdef` in any order, and they can appear more than once **[275]**.",
        "related": "def, global, long, outer, xdef.",
        "descriptionshort": "is equivalent to `\\global\\def'.",
        "type": "derived command"
    },{
        "name": "global",
        "synopsis": "\\global<assignment>",
        "description": "This command makes the immediately following assignment apply to all groups instead of just the current one **[21]**. The assignment may be a macro assignment (e.g., '`\\def\\ta{text}`') or a non-macro assignment (e.g., '`\\count1=0`' or '`\\advance\\count1 by 1`') **[275]**. Non-macro assignments for a particular variable should be always global or always local. Otherwise, it is possible to run out of *save stack* space **[301 and 346]**.",
        "related": "begingroup, globaldefs, gdef, xdef, tracingstats.",
        "descriptionshort": "is an assignment prefix which makes the assignment transcend its group.",
        "type": "command"
    },{
        "name": "globaldefs",
        "synopsis": "\\globaldefs",
        "description": "Normally, this parameter is 0, and assignments are only global if `\\global` immediately preceeds the assignment. But, if `\\globaldefs` is positive, TeX makes all assignments global. And, if `\\globaldefs` is negative, TeX ignores a `\\global` prefix **[275]**.",
        "related": "global.",
        "descriptionshort": "if positive, all assignments are global; if negative, \\global is ignored.",
        "type": "parameter (integer)"
    },{
        "name": "let",
        "synopsis": "\\let<control sequence>=<token>",
        "description": "This command provides a second way (the various `\\def`'s provide the first) for a control sequence to acquire a new meaning. The command may be used to interchange the meaning of two control sequences **[206]**. The statement '`\\let\\a=\\b`' gives `\\a` the *current* meaning of `\\b`. If `\\b` changes after the assignment is made, `\\a` does not change. Also, `\\a` is *not* a macro. So, TeX does not expand it in situations where macros are expanded **[207]**. Expansion of tokens is suppressed when TeX is reading the argument token for `\\let` **[215]**.",
        "related": "def, futurelet.",
        "descriptionshort": "gives a control sequence a token's current meaning.",
        "type": "command"
    },{
        "name": "long",
        "synopsis": "\\long<macro-definition assignment>",
        "description": "A macro is not allowed to have an argument which contains `\\par`, unless the macro is declared `\\long` **[205]**. A macro may also be declared `\\global` or `\\outer`. All three prefixes may be used in any order. Also, a prefix can occur more than once (e.g., '`\\long\\global\\long\\gdef{. . .}`') **[206]**. If two tokens compared by `\\ifx` are macros, TeX includes each token's status with respect to `\\long` in deciding if the two are the same or not **[210]**.",
        "related": "def, edef, gdef, xdef, global, outer.",
        "descriptionshort": "is a prefix for definitions which require multi-paragraph arguments.",
        "type": "command"
    },{
        "name": "noexpand",
        "synopsis": "\\noexpand<token>",
        "description": "The expansion of `\\noexpand`<token> is just <token> **[213]**. Thus, this command provides a way to suppress expansion of a token in situations where TeX normally expands it **[nr]**.",
        "related": "afterassignment, aftergroup, expandafter, futurelet.",
        "descriptionshort": "prevents the expansion of the following token.",
        "type": "expandable command"
    },{
        "name": "outer",
        "synopsis": "\\outer<macro-definition assignment>",
        "description": "A macro may be declared `\\outer` if the macro should not be allowed in: a) the argument, the parameter text, or the replacement text of another macro; b) the preamble of an alignment; or c) conditional text.  The three prefixes (`\\outer`, `\\global`, and `\\long`) can be applied to `\\def` in any order, and they can appear more than once **[206]**. If two tokens compared by `\\ifx` are macros, TeX includes each token's status with respect to `\\outer` in deciding if the two are the same or not **[210]**.",
        "related": "def, edef, gdef, xdef, global, long.",
        "descriptionshort": "is a prefix for a definition which restricts where the definition may be used.",
        "type": "command"
    },{
        "name": "relax",
        "synopsis": "\\relax",
        "description": "According to *The TeX book*, ''TeX does nothing'' when it encounters `\\relax` **[279]**. Actually, `\\relax` may tell TeX , ''This is the end of what you've been doing'' **[71]**. Or, it may say, ''Be prepared, we're about to change course'' **[353]**.",
        "descriptionshort": "is a control sequence which typesets nothing.",
        "type": "command"
    },{
        "name": "the",
        "synopsis": "\\the<internal quantity>",
        "description": "This command is used in 3 ways: a) it typesets the value of one of the parameters (integer, dimen, glue, or muglue) or one of the internal quantities (except `\\font`) **[214]**; b) `\\the\\font` returns a control sequence for the current font; and c) `\\the`<token parameter> produces a copy of the token list for the token parameter **[215]**. The internal quantites are listed on page 271 of *The TeX book*, and the parameters are listed on pages 272-275. Each of the reference pages in this book includes the primitive's type near the top of the page. This was done in part so it would be clear if `\\the` could be used with the primitive or not.",
        "related": "number, showthe.",
        "descriptionshort": "returns character tokens for an internal quantity's or parameter's current value.",
        "type": "expandable command"
    },{
        "name": "xdef",
        "synopsis": "\\xdef<control sequence><parameter text>{<replacement text>}",
        "description": "This command is equivalent to `\\global\\edef` **[215]**. The `\\global`, `\\long`, and `\\outer` prefixes can be applied to `\\xdef` in any order, and they can appear more than once **[275]**.",
        "related": "def, edef, gdef, global, long, outer.",
        "descriptionshort": "is equivalent to `\\global\\edef'.",
        "type": "derived command"
    },{
        "name": "botmark",
        "synopsis": "\\botmark",
        "description": "This command holds the *mark text* that was most recently encountered on the page that was just boxed. It is null (i.e., empty) before the first page. It is equal to the previous `\\botmark`, when a page contains no marks **[258]**. The value of `\\botmark` is global (i.e., it is not affected by grouping) **[259]**.",
        "related": "mark, firstmark, topmark.",
        "descriptionshort": "is the mark text most recently encountered on a page.",
        "type": "expandable command"
    },{
        "name": "firstmark",
        "synopsis": "\\firstmark",
        "description": "This command holds the *mark text* that was first encountered on the page that was just boxed. It is null (i.e., empty) before the first page. It is equal to the previous `\\botmark`, when a page contains no marks **[258]**. The value of `\\firstmark` is global (i.e., it is not affected by grouping) **[259]**.",
        "related": "mark, botmark, topmark.",
        "descriptionshort": "is the mark text first encountered on a page.",
        "type": "expandable command"
    },{
        "name": "mark",
        "synopsis": "\\mark{}",
        "description": "Most reference works (e.g., a dictionary, encyclopedia, cummulative index, textbook, or this book) contain *guide words* at the top of each page. The words are supposed to help a user locate a particular page. TeX uses the `\\mark` command to mark special words in a document. Then, when each page is placed in `\\box255`, TeX sets up the following three quantities: a) `\\firstmark` is the mark text that was first encountered on the page that was just boxed; b) `\\botmark` is the mark text that was most recently encountered on the page that was just boxed; and c) `\\topmark` has the value that `\\botmark` had on the previous page. The quantities are null or empty at the start of a job. If a page contains no `\\mark`'s, each quantity is set to the `\\botmark` on the previous page **[258]**. The following example is a variation of the one of page 258 in *The TeXbook*. A six page document contains ten marks, each of which holds a single letter A-J. Pages 1 and 5 have no marks; page 2 has A and B; page 3 has C, D, and E; page 4 has F; and page 6 has G, H, I, and J. Then\n```\nOn page  \\topmark  \\firstmark  \\botmark\n---------------------------------------\n1        null      null        null\n2        null      A           B\n3        B         C           E\n4        E         F           F\n5        F         F           F\n6        F         G           J\n---------------------------------------\n```\nWorks that use guide words either use the first and last marked items on each page, or they use the first item on verso pages and the last item on recto pages. There is general agreement on what the last item on a page should be. However, there is not agreement on what the first item is. Dictionaries generally say the first item is the first *physical* item on the page. An item continued from the previous page does not count. Text books and this book say the first item is the first *logical* item on the page. If the page begins with the continuation of an item, then that item is the first item. But, if the page begins with a totally new item, it is the first item. If this seems overly involved, the `\\mark`'s provided by TeX work with dictionaries, but not with text books unless the mark text is made to hold more than a single word or phrase. This is explained in detail on pages 259-260 of *The TeXbook* **[259]**. Marks can appear in horizontal or math lists, but they will not be used unless they *migrate* into the main vertical list **[280]**.",
        "related": "botmark, firstmark, topmark, splitbotmark, splitfirstmark.",
        "descriptionshort": "specifies text which should be marked.",
        "type": "command"
    },{
        "name": "topmark",
        "synopsis": "\\topmark",
        "description": "This command holds the value that `\\botmark` had on the previous page. It is null (i.e., empty) before the first page. It is equal to the previous `\\botmark`, when a page contains no marks **[258]**. The value of `\\topmark` is global (i.e., it is not affected by grouping) **[259]**.",
        "related": "mark, firstmark, botmark.",
        "descriptionshort": "is the value of \\botmark on the previous page.",
        "type": "expandable command"
    },{
        "name": "above",
        "synopsis": "\\above<dimen>",
        "description": "This command places the subformula preceeding `\\above` *over* the subformula following `\\above`. Then it places a rule whose thickness is <dimen> between the two subformulas. The command is a generalization of `\\over` and `\\atop` **[143]** and a special case of `\\abovewithdelims` **[152]**.",
        "related": "over, atop, abovewithdelims.",
        "descriptionshort": "is equivalent to `\\abovewithdelims..'.",
        "type": "derived command"
    },{
        "name": "abovedisplayshortskip",
        "synopsis": "\\abovedisplayshortskip<glue>",
        "description": "After TeX processes a math display, it adds the following items to the current vertical list: a penalty, glue, the actual display, glue, and a penalty. The two glue items are either the *above* and *below displayskip*s or the *above* and *below displayshortskip*s. The latter are used if: a) the display occurs at the start of a paragraph; b) the display follows another display; or c) the display occurs in the middle of a paragraph but does not have a left equation number and does not overlap the preceeding line of text **[189]**.",
        "related": "belowdisplayshortskip, abovedisplayskip.",
        "descriptionshort": "is alternate glue placed before a displayed equation.",
        "type": "parameter (glue)"
    },{
        "name": "abovedisplayskip",
        "synopsis": "\\abovedisplayskip<glue>",
        "description": "After TeX processes a math display, it adds the following items to the current vertical list: a penalty, glue, the actual display, glue, and a penalty. The two glue items are either the *above* and *below displayskip*s or the *above* and *below displayshortskip*s. The former are used if: a) the display occurs in the middle of a paragraph and the display *overlaps* the preceeding line of text; or b) the display has a left equation number **[189]**. Also, the former are used before and after an alignment display **[190]**.",
        "related": "belowdisplayskip, abovedisplayshortskip.",
        "descriptionshort": "is normal glue placed before a displayed equation.",
        "type": "parameter (glue)"
    },{
        "name": "abovewithdelims",
        "synopsis": "\\abovewithdelims<delim1><delim2><dimen>",
        "description": "This command is a generalized form of `\\above`. It builds the same *fraction* `\\above` does (with a line whose thickness is <dimen>). Then it puts <delim1> before the fraction and <delim2> after it. Both delimiters are scaled appropriately. If a '`.`' is used for either <delim>, TeX ignores the corresponding delimiter. In fact, `\\above`<dimen> is an abbreviation for '`\\abovewithdelims..`<dimen>'. All the other fraction commands are derived from this command **[152]**.",
        "related": "above, over, atop, overwithdelims, atopwithdelims.",
        "descriptionshort": "is a generalized fraction command.",
        "type": "command"
    },{
        "name": "atop",
        "synopsis": "\\atop",
        "description": "This command places one subformula over a second subformula, only it doesn't put a line between the two subformulas as `\\over` does **[143]**. The command is an abbreviation for '`\\atopwithdelims..`' **[152]**.",
        "related": "over, above, atopwithdelims.",
        "descriptionshort": "is equivalent to `\\atopwithdelims..'.",
        "type": "derived command"
    },{
        "name": "atopwithdelims",
        "synopsis": "\\atopwithdelims<delim1><delim2>",
        "description": "This command is a generalized form of `\\atop`. It builds the same *fraction* `\\atop` does (without a line). Then, it puts <delim1> before the fraction and <delim2> after it. Both delimiters are scaled appropriately. If a '`.`' is used for either <delim>, TeX ignores the corresponding delimiter. In fact, `\\atop` is an abbreviation for '`\\atopwithdelims..`'. Also, `\\atopwithdelims` is derived from `\\abovewithdelims` **[152]**.",
        "related": "atop, abovewithdelims.",
        "descriptionshort": "is a generalized fraction command with an invisible fraction bar.",
        "type": "derived command"
    },{
        "name": "belowdisplayshortskip",
        "synopsis": "\\belowdisplayshortskip<glue>",
        "description": "After TeX processes a math display, it adds the following items to the current vertical list: a penalty, glue, the actual display, glue, and a penalty. The two glue items are either the *above* and *below displayskip*s or the *above* and *below displayshortskip*s. The latter are used if: a) the display occurs at the start of a paragraph; b) the display follows another display; or c) the display occurs in the middle of a paragraph but does not have a left equation number and does not overlap the preceeding line of text **[189]**.",
        "related": "abovedisplayshortskip, belowdisplayskip.",
        "descriptionshort": "is alternate glue placed after a displayed equation.",
        "type": "parameter (glue)"
    },{
        "name": "belowdisplayskip",
        "synopsis": "\\belowdisplayskip<glue>",
        "description": "After TeX processes a math display, it adds the following items to the current vertical list: a penalty, glue, the actual display, glue, and a penalty. The two glue items are either the *above* and *below displayskip*s or the *above* and *below displayshortskip*s. The former are used if: a) the display occurs in the middle of a paragraph and the display *overlaps* the preceeding line of text; or b) the display has a left equation number **[189]**. Also, the former are used before and after an alignment display **[190]**.",
        "related": "abovedisplayskip, belowdisplayshortskip.",
        "descriptionshort": "is normal glue placed after a displayed equation.",
        "type": "parameter (glue)"
    },{
        "name": "binoppenalty",
        "synopsis": "\\binoppenalty",
        "description": "Just as TeX does not randomly hyphenate words, it does not randomly break math expressions between lines in a paragraph. TeX only considers a break after a relation (e.g., = or <) or a binary operation (e.g., + or &times;) **[173]**. TeX inserts a penalty after a binary operation **[174]** which is not enclosed in braces and is not part of a generalized fraction **[173]**. The actual value of the penalty added after a binary operation in an expression is the value of `\\binoppenalty` at the end of the expression **[101]**. However, the penalty is not inserted if: a) the binary operation is the final item in the entire list; b) the value of the penalty is 10,000 or more; or c) the next item in the list is a penalty item **[446-447]**.",
        "related": "relpenalty.",
        "descriptionshort": "is the penalty for a line break after a binary operation.",
        "type": "parameter (integer)"
    },{
        "name": "defaultskewchar",
        "synopsis": "\\defaultskewchar",
        "description": "Each time TeX loads a new font, it sets the `\\skewchar` of the font to this parameter. Since most fonts do not have or need a working skew char, there is little need to change this parameter from its Plain TeX value **[273]**.",
        "related": "skewchar.",
        "descriptionshort": "is -1 or the \\skewchar value for a font when it is loaded.",
        "type": "parameter (integer)"
    },{
        "name": "delcode",
        "synopsis": "\\delcode<8-bit number>=<24-bit number>",
        "description": "Each of the 256 characters TeX works with has a `\\delcode`. INITEX sets all delcodes to -1 except the one for a '`.`' which it makes 0 **[345]**. Only characters which can act as delimiters in math formulas require a positive delcode. A delcode assignment looks like: ```\\delcode`a=\"uvwxyz``` It means a small form of the delimiter for the character *a* has position `\"vw` in family `\"u`, and a large form has position `\"yz` in family `\"x`. If either form is in position 0 of family 0, the form is ignored. TeX only looks at the delcode of a character when the character follows `\\left`, `\\right`, or one of the '`..withdelims`' commands. If the delcode of the character is negative, TeX reports an error. Otherwise, it uses the value to decide on the size delimiter to use. The above rules explain why '`\\right.`' does not make a delimiter **[156]**. Plain TeX makes nine assignments similar to ```\\delcode`\\[=\"05B302```This one makes `[` an acceptable delimiter. Also, it says a small form of the delimiter is in position `\"5B` of family `0` and a large version is in position `\"02` of family `3` **[345, 427, and 432]**.",
        "related": "mathcode, delimiter, fam.",
        "descriptionshort": "is -1 or the delimiter code for a character.",
        "type": "internal quantity"
    },{
        "name": "delimiter",
        "synopsis": "\\delimiter<number>",
        "description": "This command provides a way to specify a delimiter directly. The *number* should be seven hexadecimal digits. Its leading digit must be in the range 0-7. That digit functions as a class number, and the remaining six digits function as a `\\delcode` value **[156]**. Plain TeX has over twenty definitions similar to: '`\\def\\rceil{\\delimiter\"5265307 }`' **[359]**. This definition means `\\rceil` is in family `5` (closing), its small form is in family `2` position `\"65`, and its large form is in family `3` position `\"07`. A `\\delimiter` specifies a math symbol and works in two ways. When TeX is looking for a delimiter (e.g., after `\\left`), it ignores the class digit and uses the remaining six digits as a `\\delcode`. But, when the delimiter appears in other contexts, the right three digits are dropped, and the remaining four digits become the symbol's `\\mathcode`. For `\\rceil` that means the `\\delcode` is `\"265307` and the `\\mathcode` is `\"5265` **[156]**.",
        "related": "mathcode, delcode, fam, radical.",
        "descriptionshort": "specifies a delimiter.",
        "type": "command"
    },{
        "name": "delimiterfactor",
        "synopsis": "\\delimiterfactor",
        "description": "When TeX computes the size of delimiters for a '`\\left`<subformula>`\\right`' construction, it begins by calculating the distances the subformula extends above and below the *axis*. Next, it makes *y* equal to twice the maximum of the distances just computed. Then, it computes '*y\\*f*/1000' and '*y-d*'. Finally, it makes the actual delimiters larger than each of the last two calculations. In the calculations *f* is the `\\delimiterfactor` and *d* is the `\\delimitershortfall` **[152]**.",
        "related": "delimitershortfall, left, right.",
        "descriptionshort": "is the first parameter used to compute the size of delimeters required by \\left and \\right.",
        "type": "parameter (integer)"
    },{
        "name": "delimitershortfall",
        "synopsis": "\\delimitershortfall",
        "description": "When TeX computes the size of delimiters for a '`\\left`<subformula>`\\right`' construction, it begins by calculating the distances the subformula extends above and below the *axis*. Next, it makes *y* equal to twice the maximum of the distances just computed. Then, it computes '*y\\*f*/1000' and '*y-d*'. Finally, it makes the actual delimiters larger than each of the last two calculations. In the calculations *f* is the `\\delimiterfactor` and *d* is the `\\delimitershortfall` **[152]**.",
        "related": "delimiterfactor, left, right.",
        "descriptionshort": "is the second parameter used to compute the size of delimeters required by \\left and \\right.",
        "type": "parameter (dimen)"
    },{
        "name": "displayindent",
        "synopsis": "\\displayindent",
        "description": "When TeX reads the opening `$$` of a math display, it sets `\\displayindent` to the amount of indentation for the current line. Normally, that value is 0 pt, but it depends on the paragraph shape specified by `\\parshape` and on hanging indentation. In the latter two cases TeX figures the indentation using line 1 if the display begins the paragraph or line '`\\prevgraf+2`' if the display occurs after `\\prevgraf` lines. TeX uses `\\displayindent` in deciding how much glue to put before and after the display and where to position the display on its line. The parameter may be changed inside a display, and TeX uses the last value it encounters in the display **[189]**. Each row in an alignment display is shifted right by this parameter **[190]**.",
        "related": "displaywidth, predisplaysize, abovedisplayskip, prevgraf.",
        "descriptionshort": "is the amount to shift a line holding a displayed equation.",
        "type": "parameter (dimen)"
    },{
        "name": "displaylimits",
        "synopsis": "\\displaylimits",
        "description": "Several math symbols such as summation and integration often appear with subformulas as subscripts and superscripts. The subformulas may be typeset either above and below or to the right of the symbol. Normal mathematical conventions use the first method for most displayed expressions and the second for most in-line expressions. TeX's conventions use the first method in display style and the second method in text style. TeX has three commands which change these conventions: `\\limits` always uses the first method; `\\nolimits` always uses the second method; and `\\displaylimits` uses TeX's normal conventions. If two or more of these commands follow each other, the last one controls how the expression is typeset **[144]**. Each of these commands must follow a large operator (class 1). Otherwise, TeX generates an error **[292]**.",
        "related": "limits, nolimits, textstyle, displaystyle.",
        "descriptionshort": "restores normal conventions for using limits with operators.",
        "type": "command"
    },{
        "name": "displaystyle",
        "synopsis": "\\displaystyle",
        "description": "This command is used to specify *display* style. TeX uses four main styles to typeset formulas and subformulas: display, text, script, and scriptscript. Each main style has a corresponding *cramped* style. The eight styles are referred to as: *D*, *D'*, *T*, *T'*, *S*, *S'*, *SS*, and *SS'* where the *primed* letter means the cramped style. TeX uses the text font (`\\textfont`) for the current family (`\\fam`) when it typesets material in display and text styles (both regular and cramped) **[140]**. The body of the following table lists the style of the major components in a formula whose style is known:\n```\nComponent    Current Style of Formula\nin formula   D   D'  T   T'  S, SS   S', SS'\n--------------------------------------------\nSuperscript  S   S'  S   S'  SS      SS'\nSubscript    S'  S'  S'  S'  SS'     SS'\nNumerator    T   T'  S   S'  SS      SS'\nDenominator  T'  T'  S'  S'  SS'     SS'\n--------------------------------------------\n```\nFinally, most math commands including `\\underline` do not change the current style, but `\\overline`, `\\sqrt`, and math accents change regular styles to cramped ones **[141]**.",
        "related": "textstyle, scriptstyle, scriptscriptstyle, textfont, fam.",
        "descriptionshort": "selects display style: D or D'.",
        "type": "command"
    },{
        "name": "displaywidowpenalty",
        "synopsis": "\\displaywidowpenalty",
        "description": "If a display interrupts a paragraph, TeX typesets the paragraph lines before the display, the line (or lines) in the display, and the paragraph lines after the display. This penalty is added immediately after the penultimate line before the display. It tells TeX to try to avoid starting a new page with a *widow* line immediately followed by a display **[104]**. If the Plain TeX value of `\\predisplaypenalty` is used, TeX also tries to avoid starting a new page with a display **[189]**.",
        "related": "predisplaypenalty, widowpenalty.",
        "descriptionshort": "is the penalty added after the penultimate line immediately preceeding a display.",
        "type": "parameter (integer)"
    },{
        "name": "displaywidth",
        "synopsis": "\\displaywidth",
        "description": "When TeX reads the opening `$$` of a math display, it sets `\\displaywidth` to the current line width. Normally, that value is `\\hsize`, but it depends on the paragraph shape specified by `\\parshape` and on hanging indentation. In the latter two cases TeX figures the width using line 1 if the display begins the paragraph or line '`\\prevgraf+2`' if the display occurs after `\\prevgraf` lines. TeX uses `\\displaywidth` in deciding how much glue to put before and after the display and where to position the display on its line. The parameter may be changed inside a display, and TeX uses the last value it encounters in the display **[189]**. Alignment displays do not use this parameter **[190]**.",
        "related": "displayindent, predisplaysize, abovedisplayskip.",
        "descriptionshort": "is the width of the line holding a displayed equation.",
        "type": "parameter (dimen)"
    },{
        "name": "eqno",
        "synopsis": "\\eqno<formula>",
        "description": "This command puts an *equation number* at the right-hand margin **[186]**. It may only be used in display math mode. TeX processes the material for the number as follows: a) it enters a new level of grouping and begins non-display math mode; b) it adds the `\\everymath` tokens to the new math list; c) it adds everything between the `\\eqno` command and the `$$` which ends the display to the math list; d) it converts the math list to a horizontal list which it puts in an hbox. The resulting hbox becomes the equation number **[293]**. TeX tries the following strategies as it positions the equation number and the display on a line: a) center the display and then place the equation number at the right margin; b) place the equation number at the right margin and then position the display in the remaining space; **[187]** c) if the display and the equation number are wider than `\\displaywidth` or if the equation number has zero width, center the display; add an infinite penalty; and place the equation number at the right margin on the following line. The infinite penalty prevents TeX from typesetting the display on one page and the equation number on the following page **[188-189]**.",
        "related": "leqno.",
        "descriptionshort": "puts an equation number at the right-hand margin.",
        "type": "command"
    },{
        "name": "everydisplay",
        "synopsis": "\\everydisplay{<token list>}",
        "description": "This parameter holds a list of tokens that get inserted at the beginning of every display math list **[179]**.",
        "related": "everymath, toks.",
        "descriptionshort": "holds tokens inserted at the start of every switch to display math mode.",
        "type": "parameter (token)"
    },{
        "name": "everymath",
        "synopsis": "\\everymath{<token list>}",
        "description": "This parameter holds a list of tokens that get inserted at the beginning of every non-display math list **[179]**. Since TeX processes equation numbers in non-display math mode, the `\\everymath` tokens are inserted following `\\eqno` and `\\leqno` **[293]**.",
        "related": "everydisplay, toks, eqno, leqno.",
        "descriptionshort": "holds tokens inserted at the start of every switch to math mode.",
        "type": "parameter (token)"
    },{
        "name": "fam",
        "synopsis": "\\fam<number>",
        "description": "When TeX is in math mode, it typesets material using one of 16 families of fonts. Each family has three fonts: text, script, and scriptscript **[153]**. In horizontal mode a character is uniquely identified by the two hex digits which give the character's position in the current font. In contrast, a math symbol has an identifying code consisting of three hex digits. The first digit identifies the family, and the next two digits identify the character in the corresponding font. In addition, a fourth digit, the *class* digit, is often used. It runs from 0-7. The four hex digits are used in various combination to specify `\\mathcode`'s **[154]**, `\\delcode`'s and `\\delimiter`'s **[156]**. TeX makes only two requirements on the use of family numbers. Families 2 and 3 are reserved for math symbols. Fonts used with these families are required to have additional `\\fontdimen` parameters **[157]**. Although the preceeding describes several uses of family numbers, it does not describe `\\fam`. TeX sets `\\fam` to -1 every time math mode starts. At any point in a math expression, `\\fam` can be changed. For example, Plain TeX defines `\\rm` to be '`\\fam=0 \\tenrm`'. When TeX typesets a math symbol, it checks the symbol's class. If the class is 7, it is changed to 0; and in this case if `\\fam` is between 0 and 15, the family of the symbol is changed from the family specified by `\\mathcode` to the family specified by `\\fam`. This switch plus the assignments made by Plain TeX are what makes '`${\\rm text }$`' typeset '`text`' in roman instead of in italics **[154]**. Plain TeX also has `\\newfam`. It is similar to `\\newcount` and allocates family numbers **[347]**.",
        "related": "textfont, scriptfont, scriptscriptfont, mathcode, delcode, delimiter.",
        "descriptionshort": "if 0-15, specifies the font family of class 7 (variable) math symbols.",
        "type": "parameter (integer)"
    },{
        "name": "left",
        "synopsis": "\\right<delim2>",
        "description": "This command begins a construction which has a delimiter on either side of a subformula. TeX computes how large the delimiter should be based on what is in the subformula. There are three main rules for using `\\left`: a) there must be a matching `\\right` command; b) the '`\\left` ... `\\right`' pair must occur in the same group; and c) the resulting subformula must be typeset on 1 line. However, the delimiters need not match (e.g., `(...]' is fine). Also, if a '`.`' is used for either delimiter, it will be omitted. TeX makes the delimiter just big enough to *cover* the subformula. While that is what is needed most of the time, there are instances when TeX makes an outer delimiter that is too small **[148-149]**. Also, there are times when '`\\left` ... `\\right`' puts more space around the subformula than one of Plain TeX's `\\big` commands puts **[171]**.",
        "related": "right, delcode, delimiter.",
        "descriptionshort": "makes TeX calculate the size of the delimiter needed at the left of a subformula.",
        "type": "command"
    },{
        "name": "leqno",
        "synopsis": "\\leqno<formula>",
        "description": "This command puts an *equation number* at the left-hand margin **[186]**. It may only be used in display math mode. TeX processes the material for the number as follows: a) it enters a new level of grouping and begins non-display math mode; b) it adds the `\\everymath` tokens to the new math list; c) it adds everything between the `\\leqno` command and the `$$` which ends the display to the math list; d) it converts the math list to a horizontal list which it puts in an hbox. The resulting hbox becomes the equation number **[293]**. TeX tries the following strategies as it positions the equation number and the display on a line: a) center the display and then place the equation number at the left margin; b) place the equation number at the left margin and then position the display in the remaining space; **[187]** c) if the display and the equation number are wider than `\\displaywidth` or if the equation number has zero width, place the equation number at the left margin on a line by itself; add an infinite penalty; and center the display on the following line. The infinite penalty prevents TeX from typesetting the equation number on one page and the display on the following page **[188-189]**.",
        "related": "eqno.",
        "descriptionshort": "puts an equation number at the left-hand margin.",
        "type": "command"
    },{
        "name": "limits",
        "synopsis": "\\limits",
        "description": "Several math symbols such as summation and integration often appear with subformulas as subscripts and superscripts. The subformulas may be typeset either above and below or to the right of the symbol. Normal mathematical conventions use the first method for most displayed expressions and the second for most in-line expressions. TeX's conventions use the first method in display style and the second method in text style. TeX has three commands which change these conventions: `\\limits` always uses the first method; `\\nolimits` always uses the second method; and `\\displaylimits` uses TeX's normal conventions. If two or more of these commands follow each other, the last one controls how the expression is typeset **[144]**. Each of these commands must follow a large operator (class 1). Otherwise, TeX generates an error **[292]**.",
        "related": "nolimits, displaylimits, textstyle, displaystyle.",
        "descriptionshort": "displays limits above and below large operators (class 1).",
        "type": "command"
    },{
        "name": "mathaccent",
        "synopsis": "\\mathaccent<15-bit number><single character or {subformula}>",
        "description": "This command gets the math character whose `\\mathchar` is <15-bit number>; treats the character as an accent; and centers it over the following character or subformula **[157]**. TeX makes the resulting item a class 0 (ordinary) *atom* **[170]**. The command works best if the accent is applied to a single character. Even if the accent comes in several sizes (e.g., Plain TeX's `\\widehat` or `\\widetilde`), it may not be able to grow enough to cover all subformulas **[136]**.",
        "related": "mathchar, skewchar, mathord.",
        "descriptionshort": "makes an accent atom from the mathchar and the following item.",
        "type": "command"
    },{
        "name": "mathbin",
        "synopsis": "\\mathbin<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 2, i.e., *binary*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathord, mathop, mathrel, mathopen, mathclose, mathpunct, mathinner.",
        "descriptionshort": "assigns class 2 (binary operation) to the following character or subformula.",
        "type": "command"
    },{
        "name": "mathchar",
        "synopsis": "\\mathchar<15-bit number>",
        "description": "After the necessary math fonts and font families are setup, `\\mathchar` provides one way to assign mathcodes to control sequences and to refer to math symbols. The 15-bit number should be viewed as four hex digits. The first digit gives the symbol's class which is between 0 and 7; the second digit gives the symbol's family; and the last two digits give the symbol's position in the font whose family number is digit two **[155]**.",
        "related": "mathcode, mathchardef, fam.",
        "descriptionshort": "specifies a math character by giving its class, family, and font position.",
        "type": "command"
    },{
        "name": "mathchardef",
        "synopsis": "\\mathchardef<control sequence>=<15-bit number>",
        "description": "The command '`\\mathchardef\\cs=<15-bit number>`' is an efficient alternate to '`\\def \\cs{\\mathchar<15-bit number>}`' **[155]**. Control sequences defined by `\\mathchardef` may be used with '`\\the`'. That combination returns <number> in decimal notation **[214]**. Expansion is suppressed when TeX is reading the <control sequence> **[215]**. TeX uses hexadecimal notation when it expands '`\\meaning`<control sequence>' **[336]**.",
        "related": "mathchar.",
        "descriptionshort": "provides an alternate way to define a control sequence that returns a math character.",
        "type": "derived command"
    },{
        "name": "mathchoice",
        "synopsis": "\\mathchoice{<math>}{<math>}{<math>}{<math>}",
        "description": "Many formatting packages used with TeX provides access to special math symbols. However, there are times when a symbol is required which is not readily available. The `\\mathchoice` command is used to construct new symbols. Specific rules for constructing the symbol must be given for each of the four main styles. Then the symbol may be used in any expression, and it should blend in with the rest of the expression **[151]**.",
        "related": "mathbin, mathclose, mathop, mathopen, mathord, mathpunct, mathrel, displaystyle, textstyle, scriptstyle, scriptscriptstyle.",
        "descriptionshort": "specifies specific subformulas for the 4 main styles.",
        "type": "command"
    },{
        "name": "mathclose",
        "synopsis": "\\mathclose<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 5, i.e., *closing*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathord, mathop, mathbin, mathrel, mathopen, mathpunct, mathinner.",
        "descriptionshort": "assigns class 5 (closing) to the following character or subformula.",
        "type": "command"
    },{
        "name": "mathcode",
        "synopsis": "\\mathcode<8-bit number>=<15-bit number>",
        "description": "In math mode TeX typsets *math symbols* which are identified by mathcodes having four hex digits. The first digit in a mathcode is the *class number*. It must be between 0 and 8. If it is 8, the remaining three digits must be 0. Otherwise, the remaining three digits may have any hex value. The second digit is the family number. It specifies a math font. The final two digits specify a character in the math font for the *family number*. The following table summarizes mathcode values less than 8000 and class numbers less than 8 **[154]**.\n```\nMathcode value:\n    \"wxyz\n     ^ Class number (0-7)\n      ^ Family number (0-\"F)\n       ^^ Character code (0-\"FF)\n```\n```\n0 Ordinary         4 Opening\n1 Large Operator   5 Closing\n2 Binary Relation  6 Punctuation\n3 Relation         7 Variable Family\n```\nThere are two types of math symbols: *simple characters* (i.e., letters, digits, '.', '+', ']', and other items with a `\\char` value) and *control sequences*. The `\\mathcode` command assigns a mathcode to a simple character. The version of INITEX used with Plain TeX assigns a simple character whose `\\char` value is *x* the following `\\mathcode`: 7000 + *x* if x is a digit; 7100 + *x* if *x* is an uppercase or lowercase letter; *x* in all other cases. For example, the mathcodes assigned by INITEX to '0', 'A', and '+' are 7030, 7141, and 002B **[155]**. Plain TeX makes the redefinition: ```\\mathcode`\\+= 202B```. It tells TeX that '+' is a binary operation **[344]**. The `\\mathchar` and `\\mathchardef` commands assign a mathcode to a control sequence. If a math symbol has mathcode 8000, TeX treats the symbol in math mode as if it had catcode 13 (active) **[155]**.",
        "related": "mathchar, delcode, delimiter, fam, char.",
        "descriptionshort": "holds the math character (15-bit number) for each of the 256 characters with which TeX works.",
        "type": "internal quantity"
    },{
        "name": "mathinner",
        "synopsis": "\\mathinner<single character or {subformula}>",
        "description": "This command is similar to `\\mathord` and the other commands used to specify math *parts of speech*, except `\\mathinner` does not have a *class* number. TeX treats certain subformulas such as fractions and '`\\left ... \\right`' constructions as *inner*, and it adds extra space on each side of the subformula in certain circumstances. The `\\mathinner` command tells TeX to treat the following character or subformula as inner **[155 and 170]**.",
        "related": "mathord, mathop, mathbin, mathrel, mathopen, mathclose, mathpunct.",
        "descriptionshort": "makes an inner atom holding the math field.",
        "type": "command"
    },{
        "name": "mathop",
        "synopsis": "\\mathop<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 1, i.e., *large operator*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathord, mathbin, mathrel, mathopen, mathclose, mathpunct, mathinner.",
        "descriptionshort": "assigns class 1 (large operator) to following character or subformula.",
        "type": "command"
    },{
        "name": "mathopen",
        "synopsis": "\\mathopen<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 4, i.e., *opening*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathord, mathop, mathbin, mathrel, mathclose, mathpunct, mathinner.",
        "descriptionshort": "assigns class 4 (opening) to following character or subformula.",
        "type": "command"
    },{
        "name": "mathord",
        "synopsis": "\\mathord<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 0, i.e., *ordinary*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathop, mathbin, mathrel, mathopen, mathclose, mathpunct, mathinner.",
        "descriptionshort": "assigns class 0 (ordinary) to following character or subformula.",
        "type": "command"
    },{
        "name": "mathpunct",
        "synopsis": "\\mathpunct<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 6, i.e., *punctuation*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathord, mathop, mathbin, mathrel, mathopen, mathclose, mathinner.",
        "descriptionshort": "assigns class 6 (punctuation) to following character or subformula.",
        "type": "command"
    },{
        "name": "mathrel",
        "synopsis": "\\mathrel<single character or {subformula}>",
        "description": "This command makes the following math symbol or subformula have class 3, i.e., *relation*. TeX considers the class of a subformula when it puts space around the subformula and when it decides how to typeset surrounding subformulas **[155]**.",
        "related": "mathord, mathop, mathbin, mathopen, mathclose, mathpunct, mathinner.",
        "descriptionshort": "assigns class 3 (relation) to following character or subformula.",
        "type": "command"
    },{
        "name": "mathsurround",
        "synopsis": "\\mathsurround<glue>",
        "description": "This parameter holds glue which TeX inserts when it begins and ends non-display math mode. The glue disappears if it appears at the beginning or end of a line. TeX uses the value in force when it reads the '`$`' which ends math mode **[162]**.",
        "descriptionshort": "is extra space added when switching in and out of math mode.",
        "type": "parameter (dimen)"
    },{
        "name": "medmuskip",
        "synopsis": "\\medmuskip<muglue>",
        "description": "This parameter holds the math glue used by *medium spaces* **[168]**. TeX automatically inserts thin, medium, and thick spaces in math formulas **[167]**. For example, it puts a medium space between ordinary and binary atoms in display and text styles **[170]**. Each type of space is a form of math glue and is expressed using `mu` units. There are 18mu in an em where the em is from family 2 (the math symbols font). The size of a mu depends on the current style since each style normally has a different size and hense a different em value. Math glue can stretch and shrink, and the Plain TeX value for `\\medmuskip` has a small amount of stretch but can shrink to zero **[168]**.",
        "related": "mkern, thinmuskip, medmuskip, thickmuskip, hskip, vskip.",
        "descriptionshort": "is ``medium'' math glue inserted into formulas.",
        "type": "parameter (muglue)"
    },{
        "name": "mkern",
        "synopsis": "\\mkern<mudimen>",
        "description": "This command inserts a kern with the specified math dimension into the current math list. It may only be used in math mode. Math dimensions must be given using `mu` units not `pt` or one of the other non-math units. There are 18 mu in an em where the em is from family 2 (the math symbols font). In particular, the size of a mu depends on the current style since each style normally has a different size and hense a different em value **[168]**.",
        "related": "mskip, kern.",
        "descriptionshort": "adds a math kern item to the current math list.",
        "type": "command"
    },{
        "name": "mskip",
        "synopsis": "\\mskip<muglue>",
        "description": "This command inserts special glue into a math exprssion. It may only be used in math mode. The glue is like ordinary glue except it uses '`mu`' units instead of '`pt`' or one of the other non-math units. There are 18 mu in an em where the em is from family 2 (the math symbols font). In particular, the size of a mu depends on the current style since each style normally has a different size and hense a different em value **[168]**.",
        "related": "mkern, thinmuskip, medmuskip, thickmuskip, hskip, vskip.",
        "descriptionshort": "adds math glue to the current math list.",
        "type": "command"
    },{
        "name": "muskip",
        "synopsis": "\\muskip<8-bit register number>=<muglue>",
        "description": "There are 256 muskip registers: `\\muskip0` to `\\muskip255`. Each may hold <muglue>. The commands `\\advance`, `\\multiply`, and `\\divide` allow limited arithemetic with the registers. Unlike the skip registers, a muskip register may not be placed in a dimen register since math glue is not compatible with regular glue **[nr]**. The muskip registers obey TeX's grouping structure. So, changes to a register inside a group will not affect the value of the register outside the group unless `\\global` is used with the register **[119]**. The command `\\showthe\\muskip`*n* writes the value for `\\muskip`*n* to the terminal and to the log file **[121]**. The register `\\muskip255` is available for temporary storage **[122]**.",
        "related": "muskipdef, advance, multiply, divide, dimen.",
        "descriptionshort": "assigns <muglue> to a \\muskip register.",
        "type": "internal quantity"
    },{
        "name": "muskipdef",
        "synopsis": "\\muskipdef<name>=<8-bit register number>",
        "description": "A muskip register may be used directly (e.g., `\\muskip19=6mu`) **[118]** or indirectly in one of two ways. Each indirect way involves setting up a symbolic name for a register (e.g., `\\tempmuskip`). The first indirect way uses the primitive `\\muskipdef` (e.g., '`\\muskipdef\\tempmuskip=19`'); this makes `\\tempmuskip` equivalent to `\\muskip19`. So, the command '`\\tempmuskip=6mu`' sets up muglue that might be used with `\\mskip` **[119]**. The second indirect way uses the Plain TeX command `\\newmuskip` (e.g., '`\\newmuskip\\tempmuskip`'). This time the control sequence `\\tempmuskip` is a muskip register, but it is not at all apparent which one (the log file should contain a line '`\\tempmuskip=\\muskip`*n* for some *n*) **[121]**. The direct method is fine for registers used locally in a macro or in a group. The `\\newmuskip` method (or something equivalent if Plain TeX is not used) is the preferable indirect method. If macros from several sources are used, and two different `\\muskipdef`'s use the same register number, the macros may interfere with each other. This type of problem is difficult to track down **[nr]**. TeX suppresses expansion when it is reading a control sequence that will be defined by a `\\muskipdef` **[215]**.",
        "related": "muskip.",
        "descriptionshort": "creates a symbolic name for a \\muskip register.",
        "type": "command"
    },{
        "name": "nolimits",
        "synopsis": "\\nolimits",
        "description": "Several math symbols such as summation and integration often appear with subformulas as subscripts and superscripts. The subformulas may be typeset either above and below or to the right of the symbol. Normal mathematical conventions use the first method for most displayed expressions and the second for most in-line expressions. TeX's conventions use the first method in display style and the second method in text style. TeX has three commands which change these conventions: `\\limits` always uses the first method; `\\nolimits` always uses the second method; and `\\displaylimits` uses TeX's normal conventions. If two or more of these commands follow each other, the last one controls how the expression is typeset **[144]**. Each of these commands must follow a large operator (class 1). Otherwise, TeX generates an error **[292]**.",
        "related": "limits, displaylimits, textstyle, displaystyle.",
        "descriptionshort": "displays limits to the right of large operators (class 1).",
        "type": "command"
    },{
        "name": "nonscript",
        "synopsis": "\\nonscript",
        "description": "This command inserts a special glue item of width zero in the current math list. Later, when TeX typesets the math list, TeX will ignore the item immediately after the `\\nonscript` glue if that item is a kern or glue and if the `\\nonscript` item appears in script style or scriptscript style **[179]**.",
        "related": "scriptstyle, scriptscriptstyle.",
        "descriptionshort": "ignores immediately following glue or kern in script and scriptscript styles.",
        "type": "command"
    },{
        "name": "nulldelimiterspace",
        "synopsis": "\\nulldelimiterspace<dimen>",
        "description": "This parameter is used in two ways. First, several commands that require a delimiter allow a period to be used instead of a delimiter. The period means ''do not use a delimiter this time'' (e.g., '`\\right.`'). TeX calls the period a *null* delimiter **[150]**. Second, if TeX searches for a delimiter but can't find it (e.g., because the specified font does not have the specified character), TeX treats the delimiter as a null delimiter. In either case this parameter tells TeX how much space to skip for the null delimiter **[442]**.",
        "related": "left, right, abovewithdelims, delimiter.",
        "descriptionshort": "is the width of a null or missing delimiter.",
        "type": "parameter (dimen)"
    },{
        "name": "over",
        "synopsis": "\\over",
        "description": "This command places one subformula over a second subformula and puts a line between the two **[139]**. The command is an abbreviation for '`\\overwithdelims..`' **[152]**.",
        "related": "atop, above, overwithdelims.",
        "descriptionshort": "is equivalent to `\\overwithdelims..'.",
        "type": "derived command"
    },{
        "name": "overline",
        "synopsis": "\\overline<character or {subformula}>",
        "description": "This command places a line over the following character or subformula **[131]**. The command changes one of the *uncramped* styles to its corresponding cramped style **[141]**.",
        "related": "underline.",
        "descriptionshort": "puts a line over the following character or subformula.",
        "type": "command"
    },{
        "name": "overwithdelims",
        "synopsis": "\\overwithdelims<delim1><delim2>",
        "description": "This command is a generalized form of `\\over`. It builds the same *fraction* `\\over` does. Then it puts <delim1> before the fraction and <delim2> after it. Both delimiters are scaled appropriately. If a '`.`' is used for either delimiter, TeX ignores the corresponding delimiter. In fact, `\\over` is an abbreviation for '`\\overwithdelims..`'.  Also, `\\overwithdelims` is derived from `\\abovewithdelims` **[152]**.",
        "related": "over, abovewithdelims.",
        "descriptionshort": "is a generalized fraction command with preset fraction bar thickness.",
        "type": "derived command"
    },{
        "name": "postdisplaypenalty",
        "synopsis": "\\postdisplaypenalty",
        "description": "When TeX typesets a math display or an alignment display, it inserts this penalty (in vertical mode) immediately after the list holding items for the display **[189-190]**. Changes made to `\\postdisplaypenalty` inside a display are local to the display **[nr]**.",
        "related": "predisplaypenalty.",
        "descriptionshort": "is the penalty added immediately after a math display.",
        "type": "parameter (integer)"
    },{
        "name": "predisplaypenalty",
        "synopsis": "\\predisplaypenalty",
        "description": "When TeX typesets a math display or an alignment display, it inserts this penalty (in vertical mode) immediately before the list holding items for the display. The Plain TeX value means a display will never appear at the top of a page **[189-190]**. Changes made to `\\predisplaypenalty` inside a display are local to the display **[nr]**.",
        "related": "postdisplaypenalty, displaywidowpenalty.",
        "descriptionshort": "is the penalty added immediately before a math display.",
        "type": "parameter (integer)"
    },{
        "name": "predisplaysize",
        "synopsis": "\\predisplaysize",
        "description": "When TeX reads the opening `$$` of a display, it sets `\\predisplaysize` to: a) `-\\maxdimen` if the display is the first line in a paragraph, or it follows another display; b) `\\maxdimen` if the glue in the *hbox* formed by the previous line stretches or shrinks; c) 2 ems in the current (text) font *plus* the distance the hbox is shifted right *plus* the position of the right edge of the right most box inside the hbox **[188]**. TeX uses `\\predisplaysize` in deciding whether to put `displayskips` or `displayshortskips` above and below the display **[189]**. The parameter may be changed inside a display, and TeX uses the last value it encounters in the display **[188]**. Alignment displays do not use this parameter **[190]**.",
        "related": "displayindent, displaywidth, abovedisplayskip, abovedisplayshortskip.",
        "descriptionshort": "is the effective width of the line preceeding a displayed equation.",
        "type": "parameter (dimen)"
    },{
        "name": "radical",
        "synopsis": "\\radical<27-bit number><single character or {subformula}>",
        "description": "Square roots and other *radicals* are frequently used in certain branches of mathematics. When typeset, the radical has two parts: a symbol slightly taller than the following expression and a rule which begins at the top of the symbol and extends the width of the expression. Only the symbol is in the font. The rule is supplied by the typesetting program **[nr]**. The `\\radical` command tells TeX to treat the following number as a `\\delimiter` and to create a radical using it appropriate for the following character or subformula **[157]**. In actual practice the small and large symbols in the `\\delimiter` are not sufficient for mathematical typesetting because they can't grow, and the subformula may have a large height. So, the `tfm` font files used with TeX contain lists of characters which have the same basic shape but different heights. TeX tries each character in a list until it finds one which will work with the material at hand. The CM math extension font can construct square roots of arbitrary height **[nr]**. The layout of `tfm` files is precisely described in *METAFONT: The Program* **[\\* 1087-1096]**. In particular * 1094 explains how lists of characters are built.",
        "related": "delimiter.",
        "descriptionshort": "makes a radical atom from the delimiter (27-bit number) and the math field.",
        "type": "command"
    },{
        "name": "relpenalty",
        "synopsis": "\\relpenalty",
        "description": "Just as TeX does not randomly hyphenate words, it does not randomly break math expressions between lines in a paragraph. TeX only considers a break after a relation (e.g., = or <) or a binary operation (e.g., + or &times;) **[173]**. TeX inserts a penalty after a relation **[174]** which is not enclosed in braces and is not part of a generalized fraction **[173]**. The actual value of the penalty added after a relation in an expression is the value of `\\relpenalty` at the end of the expression **[101]**. However, the penalty is not inserted if: a) the relation is the final item in the entire list; b) the value of the penalty is 10,000 or more; or c) the next item in the list is a penalty item **[446-447]**.",
        "related": "binoppenalty.",
        "descriptionshort": "is the penalty for a line break after a relation.",
        "type": "parameter (integer)"
    },{
        "name": "right",
        "synopsis": "\\right<delim>",
        "description": "This command ends a construction which has a delimiter on either side of a subformula. TeX computes how large the delimiter should be based on what is in the subformula. There are three main rules for using `\\right`: a) there must be a matching `\\left` command; b) the '`\\left` ... `\\right`' pair must occur in the same group; and c) the resulting subformula must be typeset on 1 line. However, the delimiters need not match (e.g., `(...]' is fine). Also, if a '`.`' is used for either delimiter, it will be omitted. TeX makes the delimiter just big enough to *cover* the subformula. While that is what is needed most of the time, there are instances when TeX makes an outer delimiter that is too small **[148-149]**. Also, there are times when the '`\\left` ... `\\right`' pair puts more space around the subformula than one of Plain TeX's `\\big` commands puts **[171]**.",
        "related": "left, delcode, delimiter.",
        "descriptionshort": "makes TeX calculate the size of the delimiter needed at the right of a subformula.",
        "type": "command"
    },{
        "name": "scriptfont",
        "synopsis": "\\scriptfont<4-bit family number>=<font identifier>",
        "description": "When TeX is in math mode, it typsets material using one of 16 *families* of fonts. Each family has three fonts: text, script, and scriptscript. The text, script, and scriptscript styles use the corresponding font. The `\\scriptfont` command identifies a control sequence (obtained using the `\\font` command) with the script font of a particular family. The command generates an error if the family number is not in the range 0-15. Any font may be placed in any family with the restriction that fonts in families 2 and 3 are required to have extra *special parameters* **[153]**. Math glue is defined using `mu` units. There are 18 mu in one em, and in script style, the em is taken from `\\scriptfont2` (the math symbols family) **[168]**.",
        "related": "textfont, scriptscriptfont, font, fam, scriptstyle.",
        "descriptionshort": "specifies the script font for a family.",
        "type": "internal quantity"
    },{
        "name": "scriptscriptfont",
        "synopsis": "\\scriptscriptfont<4-bit family number>=<font identifier>",
        "description": "When TeX is in math mode, it typsets material using one of 16 *families* of fonts. Each family has three fonts: text, script, and scriptscript. The text, script, and scriptscript styles use the corresponding font. The `\\scriptscriptfont` command identifies a control sequence (obtained using the `\\font` command) with the scriptscript font of a particular family. The command generates an error if the family number is not in the range 0-15. Any font may be placed in any family with the restriction that fonts in families 2 and 3 are required to have extra *special parameters* **[153]**. Math glue is defined using `mu` units. There are 18 mu in one em, and in scriptscript style, the em is taken from `\\scriptscriptfont2` (the math symbols family) **[168]**.",
        "related": "textfont, scriptfont, font, fam, scriptscriptstyle.",
        "descriptionshort": "specifies the scriptscript font for a family.",
        "type": "internal quantity"
    },{
        "name": "scriptscriptstyle",
        "synopsis": "\\scriptscriptstyle",
        "description": "This command is used to specify *scriptscript* style. TeX uses four main styles to typeset formulas and subformulas: display, text, script, and scriptscript. Each main style has a corresponding *cramped* style. The eight styles are referred to as: *D*, *D'*, *T*, *T'*, *S*, *S'*, *SS*, and *SS'* where the *primed* letter means the cramped style. TeX uses the text font (`\\scriptscriptfont`) for the current family (`\\fam`) when it typesets material in display and text styles (both regular and cramped) **[140]**. The body of the following table lists the style of the major components in a formula whose style is known:\n```\nComponent    Current Style of Formula\nin formula   D   D'  T   T'  S, SS   S', SS'\n--------------------------------------------\nSuperscript  S   S'  S   S'  SS      SS'\nSubscript    S'  S'  S'  S'  SS'     SS'\nNumerator    T   T'  S   S'  SS      SS'\nDenominator  T'  T'  S'  S'  SS'     SS'\n--------------------------------------------\n```\nFinally, most math commands including `\\underline` do not change the current style, but `\\overline`, `\\sqrt`, and math accents change regular styles to cramped ones **[141]**.",
        "related": "displaystyle, textstyle, scriptstyle, scriptscriptfont, fam.",
        "descriptionshort": "selects scriptscript style: SS or SS'.",
        "type": "command"
    },{
        "name": "scriptspace",
        "synopsis": "\\scriptspace<dimen>",
        "description": "Before TeX adds the box holding a superscript or a subscript to a math list, it increases the width of the box by `\\scriptspace` **[445, 446]**.",
        "related": "scriptstyle.",
        "descriptionshort": "is extra space added after a subscript or a superscript.",
        "type": "parameter (dimen)"
    },{
        "name": "scriptstyle",
        "synopsis": "\\scriptstyle",
        "description": "This command is used to specify *script* style. TeX uses four main styles to typeset formulas and subformulas: display, text, script, and scriptscript. Each main style has a corresponding *cramped* style. The eight styles are referred to as: *D*, *D'*, *T*, *T'*, *S*, *S'*, *SS*, and *SS'* where the *primed* letter means the cramped style. TeX uses the text font (`\\scriptfont`) for the current family (`\\fam`) when it typesets material in display and text styles (both regular and cramped) **[140]**. The body of the following table lists the style of the major components in a formula whose style is known:\n```\nComponent    Current Style of Formula\nin formula   D   D'  T   T'  S, SS   S', SS'\n--------------------------------------------\nSuperscript  S   S'  S   S'  SS      SS'\nSubscript    S'  S'  S'  S'  SS'     SS'\nNumerator    T   T'  S   S'  SS      SS'\nDenominator  T'  T'  S'  S'  SS'     SS'\n--------------------------------------------\n```\nFinally, most math commands including `\\underline` do not change the current style, but `\\overline`, `\\sqrt`, and math accents change regular styles to cramped ones **[141]**.",
        "related": "displaystyle, textstyle, scriptscriptstyle, scriptfont, fam.",
        "descriptionshort": "selects script style: S or S'.",
        "type": "command"
    },{
        "name": "skewchar",
        "synopsis": "\\skewchar<font>=<-1 or 8-bit number>",
        "description": "This quantity is one of two primitives that (in my opinion) *The TeX book* does not adequately document. The following represents my current understanding of what `\\skewchar` does based on page 443 of *The TeX book*, section 741 of *TeX : The Program*, pages 42-44 of *Computer Modern Typefaces*, and experimentation. Two CM fonts have working `\\skewchar` values: the math italic font and the math symbol font **[430-431]**. Neither font contains accents. But, both fonts contain characters with which it would be nice to use accents, and those characters are in italics. That means an accent that is just centered above a character will be in the wrong position. The accent needs to be shifted to make everything look right. TeX does this by: a) selecting a character in each font that does not need accents (that character becomes the font's *skew char*); b) specifying a ligature between the font's skew char and every other character in the font which requires an accent adjustment (pages 42-44 of *CMT* contain these ligatures); c) using the appropriate kern from the ligature between a character and the shew char when it positions an accent over the character. When TeX loads a new font, it sets the `\\skewchar` of the font to `\\defaultskewchar` **[273]**. If the `\\skewchar` is not in the range 0-255, TeX does not make the adjustments described above. In particular a `\\skewchar` value of -1 disables the adjustments.",
        "related": "defaultskewchar, mathaccent.",
        "descriptionshort": "is -1 or the character used to fine-tune the positioning of math accents.",
        "type": "internal quantity"
    },{
        "name": "textfont",
        "synopsis": "\\textfont<4-bit family number>=<font identifier>",
        "description": "When TeX is in math mode, it typsets material using one of 16 *families* of fonts. Each family has three fonts: text, script, and scriptscript. The text, script, and scriptscript styles use the corresponding font. Also, the display styles use the text font. The `\\textfont` command identifies a control sequence (obtained using the `\\font` command) with the text font of a particular family. The command generates an error if the family number is not in the range 0-15. Any font may be placed in any family with the restriction that fonts in families 2 and 3 are required to have extra *special parameters* **[153]**. Math glue is defined using `mu` units. There are 18 mu in one em, and in text style, the em is taken from `\\textfont2` (the math symbols family) **[168]**.",
        "related": "scriptfont, scriptscriptfont, font, fam, displaystyle, textstyle.",
        "descriptionshort": "specifies the text font for a family.",
        "type": "internal quantity"
    },{
        "name": "textstyle",
        "synopsis": "\\textstyle",
        "description": "This command is used to specify *text* style. TeX uses four main styles to typeset formulas and subformulas: display, text, script, and scriptscript. Each main style has a corresponding *cramped* style. The eight styles are referred to as: *D*, *D'*, *T*, *T'*, *S*, *S'*, *SS*, and *SS'* where the *primed* letter means the cramped style. TeX uses the text font (`\\textfont`) for the current family (`\\fam`) when it typesets material in display and text styles (both regular and cramped) **[140]**. The body of the following table lists the style of the major components in a formula whose style is known:\n```\nComponent    Current Style of Formula\nin formula   D   D'  T   T'  S, SS   S', SS'\n--------------------------------------------\nSuperscript  S   S'  S   S'  SS      SS'\nSubscript    S'  S'  S'  S'  SS'     SS'\nNumerator    T   T'  S   S'  SS      SS'\nDenominator  T'  T'  S'  S'  SS'     SS'\n--------------------------------------------\n```\nFinally, most math commands including `\\underline` do not change the current style, but `\\overline`, `\\sqrt`, and math accents change regular styles to cramped ones **[141]**.",
        "related": "displaystyle, scriptstyle, scriptscriptstyle, textfont, fam.",
        "descriptionshort": "selects text style: T or T'.",
        "type": "command"
    },{
        "name": "thickmuskip",
        "synopsis": "\\thickmuskip<muglue>",
        "description": "This parameter holds the math glue used by *thick spaces* **[168]**. TeX inserts thin, medium, and thick spaces in math formulas automatically **[167]**. For example, TeX puts a thick space between ordinary and relation atoms in display and text styles **[170]**. Each type of space is a form of math glue and is expressed using `mu` units. There are 18mu in an em where the em is from family 2 (the math symbols font). In particular, the size of a mu depends on the current style since each style normally has a different size and hense a different em value. Math glue can stretch and shrink, and the Plain TeX value for `\\thickmuskip` has a stretch component but not a shrink component **[168]**.",
        "related": "mskip, thinmuskip, medmuskip.",
        "descriptionshort": "is ``thick'' math glue inserted into formulas.",
        "type": "parameter (muglue)"
    },{
        "name": "thinmuskip",
        "synopsis": "\\thinmuskip<muglue>",
        "description": "This parameter holds the math glue used by *thin spaces* **[168]**. TeX inserts thin, medium, and thick spaces in math formulas automatically **[167]**. For example, TeX puts a thin space between ordinary and operator atoms **[170]**. Each type of space is a form of math glue and is expressed using `mu` units. There are 18mu in an em where the em is from family 2 (the math symbols font). In particular the size of a mu depends on the current style since each style normally has a different size and hense a different em value. Although math glue can stretch and shrink, the Plain TeX value for `\\thinmuskip` does not **[168]**.",
        "related": "mskip, medmuskip, thickmuskip.",
        "descriptionshort": "is ``thin'' math glue inserted into formulas.",
        "type": "parameter (muglue)"
    },{
        "name": "underline",
        "synopsis": "\\underline<character or {subformula}>",
        "description": "This command places a line under the following character or subformula **[131]**. The command does not change *styles* **[141]**.",
        "related": "overline.",
        "descriptionshort": "puts a line under the following character or subformula.",
        "type": "command"
    },{
        "name": "vcenter",
        "synopsis": "\\vcenter<box specification>{<vertical material>}",
        "description": "Each formula has an *axis* which is an invisible horizontal line that runs above the baseline **[150]**. The `\\vcenter` command puts its material in a box (just as `\\vbox` does) then it centers the box on the axis. The same three box specification used with `\\vbox` may be used with `\\vcenter`: none, 'to <dimen>', and 'spread <dimen>' **[151]**. Several Plain TeX macros are built using `\\vcenter` and `\\halign`: `\\cases`, `\\eqalign`, and `\\matrix`. Material placed in a `\\vcenter` will not be split between two pages. That is because TeX puts the material in a box, and TeX doesn't split boxes between pages **[193]**.",
        "related": "vbox.",
        "descriptionshort": "centers material with respect to the axis.",
        "type": "command"
    },{
        "name": "hoffset",
        "synopsis": "\\hoffset=<dimen>",
        "description": "This parameter controls the location of each typeset page's left margin. The default value of `\\hoffset` is `0pt`, and TeX makes a 1-inch left margin. That margin is moved to the right if `\\hoffset` is given a positive dimension and to the left if it is given a negative dimension **[251]**.",
        "related": "voffset, hsize, vsize.",
        "descriptionshort": "is a value added to the default 1-inch left margin.",
        "type": "parameter (dimen)"
    },{
        "name": "maxdepth",
        "synopsis": "\\maxdepth=<dimen>",
        "description": "Each time TeX adds a box to the main page, it compares the depth of the box to `\\maxdepth`. If the depth is larger than `\\maxdepth`, TeX moves the reference point in the box down thereby increasing the height and decreasing the depth of the box **[113]**. The value of `\\maxdepth` is stored when the first box or insertion is put on a new page. Changes to `\\maxdepth` are not reflected until a new page is started **[114]**.",
        "related": "vsize, splitmaxdepth, boxmaxdepth, pagedepth.",
        "descriptionshort": "is the maximum depth of boxes on the main page.",
        "type": "parameter (dimen)"
    },{
        "name": "pagedepth",
        "synopsis": "\\pagedepth",
        "description": "As TeX adds material (e.g., boxes, inserts, kerns, or glue) to the current page, the height and depth of the page constantly changes. TeX stores the current depth in `\\pagedepth` **[114]**. The value will be no larger than `\\maxdepth` **[113]** which in Plain TeX is 4pt **[348]**.",
        "related": "maxdepth, pagegoal, pagetotal, pagestretch, pageshrink, pagefilstretch, pagefillstretch, pagefilllstretch.",
        "descriptionshort": "is the actual depth of the last box on the main page.",
        "type": "internal quantity"
    },{
        "name": "pagefilllstretch",
        "synopsis": "\\pagefilllstretch",
        "description": "Several quantities hold a running total of the *plus* component of all glue added directly to the current page. The `filll` values are added to `\\pagefilllstretch` **[114]**.",
        "related": "pagefilstretch, pagefillstretch, pagestretch, pageshrink, pagegoal, pagetotal, pagedepth, tracingpages.",
        "descriptionshort": "is the amount of third-order infinite stretchability in the current page.",
        "type": "internal quantity"
    },{
        "name": "pagefillstretch",
        "synopsis": "\\pagefillstretch",
        "description": "Several quantities hold a running total of the *plus* component of all glue added directly to the current page. The `fill` values are added to `\\pagefillstretch` **[114]**.",
        "related": "pagefilstretch, pagefilllstretch, pagestretch, pageshrink, pagegoal, pagetotal, pagedepth, tracingpages.",
        "descriptionshort": "is the amount of second-order infinite stretchability in the current page.",
        "type": "internal quantity"
    },{
        "name": "pagefilstretch",
        "synopsis": "\\pagefilstretch",
        "description": "Several quantities hold a running total of the *plus* component of all glue added directly to the current page. The `fil` values are added to `\\pagefilstretch` **[114]**.",
        "related": "pagefillstretch, pagefilllstretch, pagestretch, pageshrink, pagegoal, pagetotal, pagedepth, tracingpages.",
        "descriptionshort": "is the amount of first-order infinite stretchability in the current page.",
        "type": "internal quantity"
    },{
        "name": "pagegoal",
        "synopsis": "\\pagegoal",
        "description": "This quantity holds the desired height of the current page. Before the first box is added to the page, TeX sets `\\pagegoal` to `\\maxdimen` (16383.99998pt). When TeX adds the first box or insertion to the page, TeX changes `\\pagegoal` to `\\vsize`. After that assignment, TeX does not use changes to `\\vsize` until the next page starts. In contrast, `\\pagegoal` may be changed at any time **[114]**.",
        "related": "vsize, pagetotal, pagedepth.",
        "descriptionshort": "is the desired height of the current page.",
        "type": "internal quantity"
    },{
        "name": "pageshrink",
        "synopsis": "\\pageshrink",
        "description": "This quantity holds a running total of the *minus* component of all glue that is added to the current page **[114]**. Only finite dimensions may be used in the minus component of such glue. For example, TeX issues a run-time warning if '`\\vskip 2pt minus 1fil`' appears directly on the current page (i.e., not buried in a box) **[nr]**.",
        "related": "pagestretch, pagefilstretch, pagefillstretch, pagefilllstretch, pagegoal, pagetotal, pagedepth, tracingpages.",
        "descriptionshort": "is the amount of finite shrinkability in the current page.",
        "type": "internal quantity"
    },{
        "name": "pagestretch",
        "synopsis": "\\pagestretch",
        "description": "Several quantities hold a running total of the *plus* component of all glue added directly to the current page. The finite values are added to `\\pagestretch`. In contrast to `\\pageshrink` the plus component of glue on the current page may hold one of the special units `fil`, `fill`, or `filll`. The corresponding '`\\pagefil..stretch`' holds the total of that glue **[114]**.",
        "related": "pageshrink, pagefilstretch, pagefillstretch, pagefilllstretch, pagegoal, pagetotal, pagedepth, tracingpages.",
        "descriptionshort": "is the amount of finite stretchability in the current page.",
        "type": "internal quantity"
    },{
        "name": "pagetotal",
        "synopsis": "\\pagetotal",
        "description": "Each time TeX adds a box or an insert to the current page, it updates `\\pagetotal` which is the accumulated height of the page **[114]**.",
        "related": "pagegoal, pagestretch, pageshrink, pagefilstretch, pagefillstretch, pagefilllstretch, pagedepth, tracingpages.",
        "descriptionshort": "is the accumulated height of the current page.",
        "type": "internal quantity"
    },{
        "name": "topskip",
        "synopsis": "\\topskip=<glue>",
        "description": "Ideally, the baseline of the first box or line of text on each new page will be at the same position at the top of the page. TeX uses glue provided by `\\topskip` to accomplish that. Just before the first box is added to the page, TeX computes '*g* = `\\topskip` - height of first box'. If *g* is negative, it is set equal to zero. Also, if `\\topskip` has a stretch or shrink component it is added to *g*. Finally, TeX inserts '`\\vskip` *g*' just before it adds the first box to the new page **[114]**.",
        "related": "vsize, splittopskip.",
        "descriptionshort": "is special glue added before the first box on each page.",
        "type": "parameter (glue)"
    },{
        "name": "voffset",
        "synopsis": "\\voffset=<dimen>",
        "description": "This parameter controls the location of each typeset page's top margin. The default value of `\\voffset` is `0pt`, and TeX makes a 1-inch top margin. That margin is moved down if `\\voffset` is given a positive dimension and up if it is given a negative dimension **[251]**.",
        "related": "hoffset, hsize, vsize.",
        "descriptionshort": "is a value added to the default 1-inch top margin.",
        "type": "parameter (dimen)"
    },{
        "name": "vsize",
        "synopsis": "\\vsize=<dimen>",
        "description": "Each page TeX typesets normally contains a header, footer, and *page body*, but any of the three may be omitted. The height of the body is `\\vsize` **[255]**. TeX places the body in `\\box255` where the output routine adds an appropriate header and footer and performs other tasks **[253]**. TeX stores the value of `\\vsize` in `\\pagegoal` when the first box or insertion is put on a new page. Changes to `\\vsize` are not reflected until a new page is started **[114]**. Increasing `\\vsize` is often one step in mixing single and double column output **[417]**. In *The TeX book* the word *page* generally means the *page body*. In fact, Chapter 15 of *The TeX book* is entitled ''How TeX Makes Lines into Pages,'' and it is really the page body that is ''made out of lines'' **[nr]**.",
        "related": "pagegoal, maxdepth, hsize, hoffset, voffset.",
        "descriptionshort": "is the desired height of the current page.",
        "type": "parameter (dimen)"
    },{
        "name": "adjdemerits",
        "synopsis": "\\adjdemerits=<number>",
        "description": "This value is added to the demerits calculated for a line, when TeX is breaking a paragraph into lines, if the line and the previous one are *visually incompatible* **[98]**. During the break-up, TeX classifies each line as: *tight*, *decent*, *loose*, or *very loose*. Also, it says two consecutive lines are visually incompatible if their classifications are not adjacent (i.e., a tight line followed by a loose or very loose one, or a decent line followed by a very loose one) **[97]**.",
        "related": "doublehyphendemerits, finalhyphendemerits.",
        "descriptionshort": "holds the demerits for visually incompatible adjacent lines.",
        "type": "parameter (integer)"
    },{
        "name": "baselineskip",
        "synopsis": "\\baselineskip=<glue>",
        "description": "This parameter gives the desired glue which should separate boxes in a vertical list **[78]**. In actual practice TeX uses three other primitives to compute the interline glue placed between boxes: `\\prevdepth` = *p*, `\\lineskip`, and `\\lineskiplimit` = *l*. Let the box about to be added have height *h*, and let `\\baselineskip` = {*b* plus *x* minus *y*}. If *p* <= -1000pt, no interline glue is added. Otherwise, if *b >= p + h + l*, the glue `(*b-p-h*) plus *x* minus *y*' is added just before the new box. Otherwise, the `\\lineskip` glue is placed just before the new box. After the new box is added, `\\prevdepth` is set to its depth **[80]**. Text set using 10-point type often uses '`\\baselineskip` = 12pt'. The same ratio (1.2) works well with point sizes from 7-14 points **[nr]**. To suppress interline glue between two boxes put '`\\prevdepth`=-1000pt' just before the second one. To suppress interline glue between a number of boxes set '`\\baselineskip=-\\maxdimen`', '`\\lineskiplimit=\\maxdimen`', and '`\\lineksip`=0pt' before the first box **[352]**.",
        "related": "lineskip, lineskiplimit, prevdepth.",
        "descriptionshort": "is glue added between lines to keep their baselines consistently spaced.",
        "type": "parameter (glue)"
    },{
        "name": "doublehyphendemerits",
        "synopsis": "\\doublehyphendemerits=<number>",
        "description": "When TeX is breaking a paragraph into lines, this value is added to the demerits calculated for a line if the line and the previous one end with discretionary breaks **[98]**.",
        "related": "adjdemerits, finalhyphendemerits.",
        "descriptionshort": "holds the demerits added if two consecutive lines end with discretionary breaks.",
        "type": "parameter (integer)"
    },{
        "name": "emergencystretch",
        "synopsis": "\\emergencystretch=<dimen>",
        "description": "TeX will make up to three attempts to break a paragraph into lines. The first two use `\\pretolerance` and `\\tolerance` **[97]**. TeX only makes the third attempt if `\\emergencystretch` is positive. In that case TeX adds `\\emergencystretch` to the stretch in the line when the text must stretch to fill an hbox of the correct width. This decreases `\\badness` **[107]**.",
        "related": "pretolerance, tolerance, badness.",
        "descriptionshort": "is glue used in the third pass made for bad paragraphs.",
        "type": "parameter (dimen)"
    },{
        "name": "everypar",
        "synopsis": "\\everypar{<token list>}",
        "description": "This parameter holds a list of tokens added at the start of a new paragraph. The sequence is: a) begin a new horizontal list; b) add an empty box with width `\\parindent` (unless the paragraph was begun with `\\noindent`); c) add the tokens in `\\everypar`; d) continue with the rest of the paragraph **[105]**. Token expansion is suppressed while the token list in `\\everypar` is read **[215]**. The effects of an `\\everypar` statement may be limited with groups or canceled by saying '`\\everypar{}`' **[nr]**.",
        "related": "toks.",
        "descriptionshort": "holds tokens added at the beginning of every paragraph.",
        "type": "parameter (token)"
    },{
        "name": "finalhyphendemerits",
        "synopsis": "\\finalhyphendemerits=<number>",
        "description": "When TeX breaks a paragraph into lines, it adds `\\finalhyphendemerits` to the demerits for the penultimate line in the paragraph if the line ends with a discretionary break **[98]**.",
        "related": "adjdemerits, doublehyphendemerits.",
        "descriptionshort": "holds the demerits added if the penultimate line in a paragraph ends with a discretionary break.",
        "type": "parameter (integer)"
    },{
        "name": "hangafter",
        "synopsis": "\\hangafter=<number>",
        "description": "TeX provides two alternatives to the normal paragraph shape. One is *hanging indentation*. It removes a rectangular region from one of the four corners of a normal paragraph. Two parameters control the size of the rectangle which is removed: `\\hangafter` and `\\hangindent`. Let *n* be the value for `\\hangafter`. Then if *n* >= 0, hanging indentation occurs on lines *n*+1, *n*+2, ... of the paragraph, but, if *n* < 0, it occurs on lines 1, 2, ..., |*n*| **[102]**. A normal paragraph is made if `\\hangafter=1` and `\\hangindent=0pt`. TeX resets `\\hangafter` to its default value at the end of every paragraph **[103]** and when it enters internal vertical mode **[349]**.",
        "related": "hangindent, parshape, prevgraf.",
        "descriptionshort": "is the number of lines before hanging indentation changes.",
        "type": "parameter (integer)"
    },{
        "name": "hangindent",
        "synopsis": "\\hangindent=<dimen>",
        "description": "TeX provides two alternatives to the normal paragraph shape. One is *hanging indentation*. It removes a rectangular region from one of the four corners of a normal paragraph. Two parameters control the size of the rectangle which is removed: `\\hangafter` and `\\hangindent`. Let *x* be value for `\\hangindent`. The lines with hanging indentaion have width '`\\hsize` - *x*'. If *x* > 0, the indentation appears at the left margin, otherwise it appears at the right margin **[102]**. A normal paragraph is made if `\\hangafter=1` and `\\hangindent=0pt`. TeX resets `\\hangindent` to its default value at the end of every paragraph **[103]** and when it enters internal vertical mode **[349]**.",
        "related": "hangafter, parshape.",
        "descriptionshort": "is the amount of hanging indentation.",
        "type": "parameter (dimen)"
    },{
        "name": "hsize",
        "synopsis": "\\hsize=<dimen>",
        "description": "This dimension determines the width of normal lines in a paragraph **[27]**. However, the first and last lines in a paragraph are special. The first line is affected by `\\parindent` **[101]**, and the last line is affected by `\\parfillskip` **[100]**. If a paragraph contains several `\\hsize` commands, TeX uses the last one to typeset the paragraph **[101]**.",
        "related": "parindent, parfillskip, hangafter, hangindent, parshape, vsize, hoffset, voffset.",
        "descriptionshort": "is the width of normal lines in a paragraph.",
        "type": "parameter (dimen)"
    },{
        "name": "ignorespaces",
        "synopsis": "\\ignorespaces<optional spaces>",
        "description": "After `\\ignorespaces` TeX reads and expands tokens and does nothing until it reaches a token which is not a space **[279]**.",
        "descriptionshort": "makes TeX read and expand tokens but do nothing until a nonspace token is reached.",
        "type": "command"
    },{
        "name": "indent",
        "synopsis": "\\indent",
        "description": "Normally, TeX needs no help in starting a new paragraph, but occasionally it does. The `\\indent` command causes TeX to switch from vertical or internal vertical mode to horizontal mode. Also, it adds an empty box to the new horizontal list **[86]**. The width of the box is the value of `\\parindent` at the time the box is added to the list **[101]**. If TeX is already in horizontal or math mode, `\\indent` adds an empty box whose width is `\\parindent` to the current list **[86]** and sets the spacefactor to 1000 **[286]**.",
        "related": "parindent, noindent.",
        "descriptionshort": "begins a new paragraph indented by \\parindent.",
        "type": "command"
    },{
        "name": "leftskip",
        "synopsis": "\\leftskip=<glue>",
        "description": "This parameter holds glue which TeX inserts on the left of every line in a paragraph **[100]**. The value used is the one current when the paragraph ends **[101]**.",
        "related": "rightskip, parindent, parfillskip.",
        "descriptionshort": "is glue added at the left of every line in a paragraph.",
        "type": "parameter (glue)"
    },{
        "name": "lineskip",
        "synopsis": "\\lineskip=<glue>",
        "description": "If the glue specified by `\\baselineskip` brings two adjacent boxes in a vertical list closer together than `\\lineskiplimit`, then `\\lineskip` glue is placed between the boxes **[78]**.",
        "related": "baselineskip, lineskiplimit.",
        "descriptionshort": "is alternate interline glue used if the \\baselineskip glue is not feasible.",
        "type": "parameter (glue)"
    },{
        "name": "lineskiplimit",
        "synopsis": "\\lineskiplimit=<dimen>",
        "description": "If the glue specified by `\\baselineskip` brings two adjacent boxes in a vertical list closer together than `\\lineskiplimit`, then `\\lineskip` glue is placed between the boxes **[78]**.",
        "related": "baselineskip, lineskip.",
        "descriptionshort": "is the cutoff used to select between \\baselineskip and \\lineskip.",
        "type": "parameter (dimen)"
    },{
        "name": "looseness",
        "synopsis": "\\looseness=<number>",
        "description": "The command '`\\looseness`=*l*' tells TeX to try and make the current paragraph *l* lines longer (if *l* is > 0) or *l* lines shorter (if *l* < 0) while maintaining the general tolerances used to typeset the ms. If *l* is > 0, a tie '~' is often placed between the last two words in the paragraph to prevent a short last line **[103-104]**. The parameter is reset to zero at the end of every paragraph or when internal vertical mode is started **[349]**.",
        "related": "linepenalty.",
        "descriptionshort": "tells TeX to try and increase or decrease the number of lines in a paragraph.",
        "type": "parameter (integer)"
    },{
        "name": "noboundary",
        "synopsis": "\\noboundary",
        "description": "This command provides one way to break ligatures.",
        "descriptionshort": "if present, breaks ligatures and kerns.",
        "type": "command"
    },{
        "name": "noindent",
        "synopsis": "\\noindent",
        "description": "If TeX is in vertical or internal vertical mode, this command begins horizontal mode. This provides a way to begin a new paragraph which is not indented **[86]**. Otherwise, the command has no effect **[286 and 291]**.",
        "related": "indent.",
        "descriptionshort": "begins a new paragraph that is not indented.",
        "type": "command"
    },{
        "name": "par",
        "synopsis": "\\par",
        "description": "This command provides an explicit way to end a paragraph **[86]**. However, the command is not allowed in math mode **[135]** and does nothing in restricted horizontal mode **[286]**. Also, in vertical mode the command just exercises the page builder **[283]**.",
        "related": "parfillskip.",
        "descriptionshort": "is an explicit command to end a paragraph.",
        "type": "command"
    },{
        "name": "parfillskip",
        "synopsis": "\\parfillskip=<glue>",
        "description": "When TeX ends a paragraph, it adds the following to the current horizontal list: '`\\unskip\\penalty10000\\hskip\\parfillskip\\penalty-10000`'. The `\\unskip` removes the glue at the end of the paragraph (e.g., unnecessary trailing spaces). The first penalty prevents a line break, and the second penalty forces a break. Finally, the glue added by `\\parfillskip` finishes the last line of the paragraph **[100]**. Each implemention of TeX has a limit to the number of words in a paragraph. TeX can work with longer paragraphs by breaking the paragraph into pieces which are within TeX's limits and connecting the pieces with '`{\\parfillskip=0pt \\par \\parskip=0pt \\noindent}`' **[315]**. If TeX begins display math mode in the middle of a paragraph, it adds `\\parfillskip` glue to the material which preceeds the display **[287]**.",
        "related": "hsize, parindent, par.",
        "descriptionshort": "is glue which finishs the last line of a paragraph.",
        "type": "parameter (glue)"
    },{
        "name": "parindent",
        "synopsis": "\\parindent=<dimen>",
        "description": "This dimension gives the width of the empty box which is placed at the start of each new paragraph not started by `\\noindent` **[86]**. TeX adds the box to the paragraph before it adds the tokens in `\\everypar` **[105]**. Also, it uses the value `\\parindent` has when the box is added to the current horizontal list **[101]**.",
        "related": "indent, noindent, hsize, parfillskip.",
        "descriptionshort": "is the width of indentation at the beginning of a paragraph.",
        "type": "parameter (dimen)"
    },{
        "name": "parshape",
        "synopsis": "\\parshape=<number><shape dimensions>",
        "description": "TeX provides two alternatives to the normal paragraph shape. One is `\\parshape` which allows the lines in a paragraph to have arbitrary indentations (from the left margin) and lengths. The *number* specifies how many *shape dimensions* are present. Each shape dimension consists of two dimensions: an indentation and a length. The *i*th line in the paragraph uses the *i*th shape dimension if *i<=n* and the *n*th otherwise **[101]**. TeX sets '`\\parshape=0`' at the end of every paragraph **[103]** and when it enters internal vertical mode. That cancels the effects of a previously specified `\\parshape` **[101 and 349]**. The command '`\\the\\parshape`' only gives the number of shape dimensions **[214]**.",
        "related": "hangafter, handindent, prevgraf.",
        "descriptionshort": "specifies an arbitrary paragraph shape.",
        "type": "internal quantity"
    },{
        "name": "parskip",
        "synopsis": "\\parskip=<glue>",
        "description": "This parameter holds glue that is placed between paragraphs. TeX adds it to the vertical list, at the start of a new paragraph, unless that list is empty **[104 and 282]**.",
        "descriptionshort": "is extra glue put between paragraphs.",
        "type": "parameter (glue)"
    },{
        "name": "pretolerance",
        "synopsis": "\\pretolerance=<number>",
        "description": "TeX will make up to three attempts to break a paragraph into lines. First, it tries to find breaks, without using hyphenation, so that each of the resulting lines has `\\badness` no larger than `\\pretolerance`. Since `\\badness` is at most 10,000, setting '`\\pretolerance=10000`' will always allow TeX to find line breaks on its first attempt, but the results may be poor. Also, if '`\\pretolerance=-1`', TeX skips the first attempt **[96]**. The second attempt uses `\\tolerance` **[97]**, and the third attempt uses `\\emergencystretch` **[107]**.",
        "related": "tolerance, emergencystretch, badness.",
        "descriptionshort": "is the acceptable \\badness of lines in a paragraph before hyphenation is attempted.",
        "type": "parameter (integer)"
    },{
        "name": "prevgraf",
        "synopsis": "\\prevgraf",
        "description": "This quantity holds the number of lines in the last completed paragraph. TeX uses `\\prevgraf` in its line-breaking routine only with hanging indentation and a nonstandard `\\parshape` **[103]**. TeX assumes each math display **[188]** and allignment display **[190]** is only three lines long. If either is longer, a manual adjustment to `\\prevgraf` may be required **[188]**.",
        "related": "hangafter, parshape.",
        "descriptionshort": "is the number of lines in the paragraph most recently completed or partially completed.",
        "type": "internal quantity"
    },{
        "name": "rightskip",
        "synopsis": "\\rightskip=<glue>",
        "description": "This parameter holds glue which TeX inserts on the right of every line in a paragraph **[100]**. The value used is the one current when the paragraph ends **[101]**.",
        "related": "leftskip, parindent, parfillskip.",
        "descriptionshort": "is glue added at the right of every line in a paragraph.",
        "type": "parameter (glue)"
    },{
        "name": "spacefactor",
        "synopsis": "\\spacefactor=<number>",
        "description": "There are two ways to control interword spacing. The normal way uses `\\spacefactor`; the alternate way uses `\\spaceskip` and `\\xspaceskip`. The normal way is used unless `\\spaceskip` and/or `\\xspaceskip` is nonzero. Each of the 256 characters in a font has a space factor code which is an integer from 0 to 32767. Initially, the uppercase letters 'A' to 'Z' are assigned 999 and all other characters are assigned 1000. TeX maintains `\\spacefactor`, but its value *f* may be changed at any time. At the start of a new horizontal list it is set to 1000. Each time a character with a space factor code *g* is added to the current list, *f* is set to *g* unless: a) *g* is zero (*f* is not changed); or b) *f* < 1000 < *g* (*f* is set to 1000). Each font has a number of special <dimen> parameters (see `\\fontdimen`). Four of them are used to determine interword glue: normal space, normal stretch, normal shrink, and extra space. When *f* is 1000, the interword glue is glue consisting of the three *normal* dimensions. Otherwise, the stretch component is multiplied by *f*/1000 and the shrink component is multiplied by 1000/*f*. Finally, if *f* >= 2000, the *extra space* dimension is added to the *normal space* component of the interword glue **[76]**.",
        "related": "sfcode, spaceskip, xspaceskip, fontdimen.",
        "descriptionshort": "controls interword spacing.",
        "type": "internal quantity"
    },{
        "name": "spaceskip",
        "synopsis": "\\spaceskip=<number>",
        "description": "There are two ways to control interword spacing. The normal way uses `\\spacefactor` *f*; the alternate way uses `\\spaceskip` and `\\xspaceskip`. If `\\xspaceskip` is nonzero and *f* >= 2000, the `\\xspaceskip` glue becomes the interword glue. Otherwise, if `\\spaceskip` is nonzero, the `\\spaceskip` glue has its stretch and shrink components multiplied by *f*/1000 and 1000/*f*, and that becomes the interword glue **[76]**.",
        "related": "xspaceskip, spacefactor.",
        "descriptionshort": "is alternate interword glue.",
        "type": "parameter (glue)"
    },{
        "name": "tolerance",
        "synopsis": "\\tolerance=<number>",
        "description": "TeX will make up to three attempts to break a paragraph into lines. If the first attempt using `\\pretolerance` fails, TeX hyphenates every work in the paragraph. Then, it tries to find breaks so that each line has `\\badness` no larger than `\\tolerance`. Since `\\badness` is at most 10,000, setting `\\tolerance=10000` will always allow TeX to find line breaks. But the results may be poor **[96]**. The third attempt uses `\\emergencystretch` **[107]**.",
        "related": "pretolerance, emergencystretch, badness.",
        "descriptionshort": "is the acceptable \\badness of lines after hyphenation.",
        "type": "parameter (integer)"
    },{
        "name": "vadjust",
        "synopsis": "\\vadjust{<vertical list>}",
        "description": "This command provides a way to insert *vertical material* at a particular point in a paragraph without interfering with the rest of the paragraph. When formatting a paragraph containing `\\vadjust`, TeX : a) saves the specified vertical list; b) breaks the paragraph into lines; c) adds the lines to the enclosing vertical list; and d) inserts the saved list into the enclosing vertical list immediately after the line which held the original `\\vadjust`. For example, if '`\\vadjust{\\eject}`' is placed in a paragraph, a page break will occur at the end of the line containing the `\\vadjust`. Also, the paragraph will continue as normal on the next page **[105]**. The command is not allowed in vertical modes **[281]**.",
        "related": "penalty.",
        "descriptionshort": "inserts a vertical list between two lines in a paragraph.",
        "type": "command"
    },{
        "name": "xspaceskip",
        "synopsis": "\\xspaceskip=<glue>",
        "description": "There are two ways to control interword spacing. The normal way uses `\\spacefactor` *f*; the alternate way uses `\\spaceskip` and `\\xspaceskip`. If `\\xspaceskip` is nonzero and *f* >= 2000, the `\\xspaceskip` glue becomes the interword glue. Otherwise, if `\\spaceskip` is nonzero, the `\\spaceskip` glue has its stretch and shrink components multiplied by *f*/1000 and 1000/*f*, and that becomes the interword glue **[76]**.",
        "related": "spaceskip, spacefactor.",
        "descriptionshort": "is alternate intersentence glue.",
        "type": "parameter (glue)"
    },{
        "name": "brokenpenalty",
        "synopsis": "\\brokenpenalty",
        "description": "After TeX breaks a paragraph into lines, it moves each line to the containing vertical list. Normally, TeX places a penalty followed by interline glue between each pair of lines. If a line ends with a discretionary break (e.g., a hyphen), TeX adds `\\brokenpenalty` to the penalties inserted immediately after the line **[104]**.",
        "related": "clubpenalty, widowpenalty, interlinepenalty, hyphenpenalty, exhyphenpenalty, discretionary.",
        "descriptionshort": "is the penalty added after a line ending with an hyphenated word.",
        "type": "parameter (integer)"
    },{
        "name": "clubpenalty",
        "synopsis": "\\clubpenalty",
        "description": "After TeX breaks a paragraph into lines, it moves each line to the containing vertical list. Normally, TeX places a penalty followed by interline glue between each pair of lines. TeX adds `\\clubpenalty` to the penalties inserted immediately after the first line in the paragraph **[104]**.",
        "related": "widowpenalty, brokenpenalty, interlinepenalty.",
        "descriptionshort": "is the penalty added after the first line in a paragraph.",
        "type": "parameter (integer)"
    },{
        "name": "exhyphenpenalty",
        "synopsis": "\\exhyphenpenalty",
        "description": "When TeX breaks a paragraph into lines, it adds `\\exhyphenpenalty` to the penalties on each line, in its calculation of a line's demerits, if the line ends with a discretionary whose pre-break text is empty (i.e., a word contains a hyphen, and the break is after the hyphen) **[96]**. The value used for `\\exhyphenpenalty` is the one that is current at the end of the paragraph **[101]**.",
        "related": "hyphenpenalty, brokenpenalty, discretionary.",
        "descriptionshort": "is the penalty for a line break after an explicit hyphen.",
        "type": "parameter (integer)"
    },{
        "name": "floatingpenalty",
        "synopsis": "\\floatingpenalty",
        "description": "This holds the penalty which is added to `\\insertpenalties` for each unsplit insertion which will not fit on the current page (i.e., the insertion *floats* to the next page) **[123]**. Generally, each class of insertions has its own value for `\\floatingpenalty` which is set at some point in the routine used to make the insertion **[124 and 363]**. The actual value of `\\floatingpenalty` used with a particular class of insertions is the value of the parameter just before the ending '`}`' of the corresponding `\\insert` **[281]**.",
        "related": "insertpenalties, insert.",
        "descriptionshort": "is the penalty for insertions that are split between pages.",
        "type": "parameter (integer)"
    },{
        "name": "hyphenpenalty",
        "synopsis": "\\hyphenpenalty",
        "description": "When TeX breaks a paragraph into lines, it adds `\\hyphenpenalty` to the penalties on each line, in its calculation of a line's demerits, if the line ends with a discretionary whose pre-break text is nonempty (i.e., TeX has hyphenated a word, and the break is after the hyphen) **[96]**. The value used for `\\hyphenpenalty` is the one that is current at the end of the paragraph **[101]**.",
        "related": "exhyphenpenalty, brokenpenalty, discretionary.",
        "descriptionshort": "is the penalty for a line break after a discretionary hyphen.",
        "type": "parameter (integer)"
    },{
        "name": "interlinepenalty",
        "synopsis": "\\interlinepenalty",
        "description": "After TeX breaks a paragraph into lines, it moves each line to the containing vertical list. TeX adds `\\interlinepenalty` to the penalties inserted immediately after every line for each line except the last one **[104]**.",
        "related": "clubpenalty, widowpenalty, brokenpenalty, linepenalty.",
        "descriptionshort": "is the penalty added between lines in a paragraph.",
        "type": "parameter (integer)"
    },{
        "name": "lastpenalty",
        "synopsis": "\\lastpenalty",
        "description": "If the final item on the current list is a penalty, `\\lastpenalty` has that value; otherwise `\\lastpenalty` is 0. The penalty item itself is not removed from the list by `\\lastpenalty` **[214]**. The `\\unpenalty` command does that **[280]**.",
        "related": "unpenalty, lastbox, lastkern, lastskip.",
        "descriptionshort": "is 0 or the last penalty on the current list.",
        "type": "internal quantity"
    },{
        "name": "linepenalty",
        "synopsis": "\\linepenalty",
        "description": "When TeX is working to break a paragraph into lines, it adds `\\linepenalty` to each potential line's badness in its calculation of the line's demerits. Increasing this parameter causes TeX to try and use fewer lines for the paragraph **[98]**.",
        "related": "badness, looseness, interlinepenalty.",
        "descriptionshort": "is an amount added to the \\badness calculated for every line in a paragraph.",
        "type": "parameter (integer)"
    },{
        "name": "outputpenalty",
        "synopsis": "\\outputpenalty",
        "description": "Part of the cleanup that TeX does, after a page break is determined but before the output routine is called, is to set `\\outputpenalty`. If the page break occurred at a penalty, that penalty is placed in `\\outputpenalty`. Otherwise, `\\outputpenalty` is set to 10,000 **[125]**. An output routine which ships out nothing and returns everything in `\\box255` to the main vertical list should also insert a penalty whose value is `\\outputpenalty` **[254]**. Normally, an output routine has no idea where it is in a document. However, if special penalties are placed in the document, the output routine can check `\\outputpenalty` and get clues about where it is and what triggered the page break **[400]**.",
        "related": "penalty, insertpenalties.",
        "descriptionshort": "holds the penalty from the current page break.",
        "type": "parameter (integer)"
    },{
        "name": "penalty",
        "synopsis": "\\penalty<number>",
        "description": "This command adds a penalty item to the current list. In vertical mode TeX exercises the page builder after the item is added **[280]**. A penalty is one of five places where a line break can occur in a horizontal list **[96]** and one of three places where a page break can occur in a vertical list **[110]**. Penalties in both places may be made automatically by TeX or added by the `\\penalty` command. If <number> is 10,000 or larger, TeX will never break a line or a page there. Also, if <number> is -10,000 or less, it will always break a line or a page there **[97 and 110]**. Any other penalty value is used in the calculation of: a potential line's *demerits* (in horizontal mode) **[98]** or a potential page's *cost* (in vertical mode) **[111]**. Plain TeX has `\\break` and `\\nobreak` macros which are defined to be: `\\penalty-10000` and `\\penalty10000`. The macros may be used in any mode **[353]**. In horizontal mode, the `\\vadjust` command may be used to add a penalty that will show up in the enclosing vertical list **[105]**.",
        "related": "lastpenalty, vadjust.",
        "descriptionshort": "adds a penalty to the current list.",
        "type": "command"
    },{
        "name": "unpenalty",
        "synopsis": "\\unpenalty",
        "description": "If the last item on the current list is a penalty, `\\unpenalty` removes it; otherwise `\\unpenalty` has no effect. The command may not be used in vertical mode if the main vertical list-so-far has been entirely contributed to the current page **[280]**.",
        "related": "lastpenalty, unkern, unskip.",
        "descriptionshort": "removes a penalty from the current list.",
        "type": "command"
    },{
        "name": "widowpenalty",
        "synopsis": "\\widowpenalty",
        "description": "After TeX breaks a paragraph into lines, it moves each line to the containing vertical list. Normally, TeX places a penalty followed by interline glue between each pair of lines. TeX adds `\\widowpenalty` to the penalties inserted immediately after the penultimate line in the paragraph **[104]**.",
        "related": "clubpenalty, brokenpenalty, interlinepenalty.",
        "descriptionshort": "is the penalty added after the penultimate line in a paragraph.",
        "type": "parameter (integer)"
    },{
        "name": "advance",
        "synopsis": "\\advance<numeric variables> by <quantity>",
        "description": "This command is used to increase or decrease one of the <numeric variables>. The <quantity> should have a type compatible with the variable as shown in the following:\n\\advance<integer variable> by <number>\n\\advance<dimen variable> by <dimen>\n\\advance<glue variable> by <glue>\n\\advance<muglue variable> by <muglue>\nAn <integer variable> is: a) an explicit \\count register (e.g., \\count17); b) a control sequence specified using \\countdef, \\newcount, or something equivalent; or c) an integer parameter such as \\tolerance or \\widowpenalty. The dimen, glue, and muglue variables are similar. The ''by'' is optional **[118 and 276]**.",
        "related": "multiply, divide, count, dimen, skip, muskip.",
        "descriptionshort": "increases or decreases a numeric variable.",
        "type": "command"
    },{
        "name": "count",
        "synopsis": "\\count<8-bit register number>=<number>",
        "description": "There are 256 count registers: `\\count0` to `\\count255`. Each may hold an integer from -2,147,483,647 to 2,147,483,647 (i.e., from -2<sup>31</sup> to 2^{31}). The commands `\\advance`, `\\multiply`, and `\\divide` allow limited arithemetic with the registers **[118]**. TeX considers `\\count0` to `\\count9` to be special and writes the nonzero ones to the terminal and log file each time it writes a page **[119]**. Plain TeX uses `\\count0` to hold the page number **[119, 362]**. The count registers obey TeX's grouping structure. So, changes to a register inside a group will not affect the value of the register outside the group unless `\\global` is used with the register **[119]**. The command `\\showthe\\count`*n* writes the value for `\\count`*n* to the terminal and to the log file **[121]**. The register `\\count255` is available for temporary storage **[122]**.",
        "related": "countdef, ifodd, ifnum, advance, multiply, divide.",
        "descriptionshort": "assigns an integer to a \\count register.",
        "type": "internal quantity"
    },{
        "name": "countdef",
        "synopsis": "\\countdef<name>=<8-bit register number>",
        "description": "A count register may be used directly (e.g., `\\count21=1`) **[118]** or indirectly in one of two ways. Each indirect way involves setting up a symbolic name for a register (e.g., `\\sectno` for *section number*). The first indirect way uses the primitive `\\countdef` (e.g., '`\\countdef\\sectno=21`'); this makes `\\sectno` equivalent to `\\count21`. So, the command '`\\sectno=1`' sets the section number to 1 **[119]**. The second indirect way uses the Plain TeX command `\\newcount` (e.g., '`\\newcount\\sectno`'). This time the control sequence `\\sectno` is a count register, but it is not at all apparent which one (the log file should contain a line '`\\sectno=\\count`*n*' for some *n*) **[121]**. The direct method is fine for registers used locally in a macro or in a group. The `\\newcount` method (or something equivalent if Plain TeX is not used) is the preferable indirect method. If macros from several sources are used, and two different `\\countdef`'s use the same register number, the macros may interfere with each other. This type of problem is difficult to track down **[nr]**. TeX suppresses expansion when it is reading a control sequence that will be defined by a `\\countdef` **[215]**.",
        "descriptionshort": "creates a symbolic name for a \\count register.",
        "type": "command"
    },{
        "name": "dimen",
        "synopsis": "\\dimen<8-bit register number>=<dimen>",
        "description": "There are 256 dimen registers: `\\dimen0` to `\\dimen255`. Each may hold a *dimension*. The commands `\\advance`, `\\multiply`, and `\\divide` allow limited arithemetic with the registers. A dimen register may be placed in a count register. TeX converts a dimension to a number by assuming units of `sp` (scaled points) **[118]**. The dimen registers obey TeX's grouping structure. So, changes to a register inside a group will not affect the value of the register outside the group unless `\\global` is used with the register **[119]**. The command '`\\showthe\\dimen`*n*' writes the value for '`\\dimen`*n*' to the terminal and to the log file **[121]**. The register `\\dimen255` is available for temporary storage **[122]**.",
        "related": "dimendef, ifdim, advance, multiply, divide, count.",
        "descriptionshort": "assigns a <dimen> to a \\dimen register.",
        "type": "internal quantity"
    },{
        "name": "dimendef",
        "synopsis": "\\dimendef<name>=<8-bit register number>",
        "description": "A dimen register may be used directly (e.g., `\\dimen17=\\hsize`) **[118]** or indirectly in one of two ways. Each indirect way involves setting up a symbolic name for a register (e.g., `\\pagewidthA`). The first indirect way uses the primitive `\\dimendef` (e.g., '`\\dimendef\\pagewidthA=17`'); this makes `\\pagewidthA` equivalent to `\\dimen17`. So, the command '`\\pagewidthA=\\hsize`' stores a copy of `\\hsize` **[119]**. The second indirect way uses the Plain TeX command `\\newdimen` (e.g., '`\\newdimen\\pagewidthA`'). This time the control sequence `\\pagewidthA` is a dimen register, but it is not at all apparent which one. The log file should contain a line '`\\pagewidthA=\\dimen`*n*' for some *n* **[121]**. The direct method is fine for registers used locally in a macro or in a group. The `\\newdimen` method or something equivalent if Plain TeX is not used is the preferable indirect method. If macros from several sources are used, and two different `\\dimendef`'s use the same register number, the macros may interfere with each other. This type of problem is difficult to track down **[nr]**. TeX suppresses expansion when it is reading a control sequence that will be defined by a `\\dimendef` **[215]**.",
        "related": "dimen.",
        "descriptionshort": "creates a symbolic name for a \\dimen register.",
        "type": "command"
    },{
        "name": "divide",
        "synopsis": "\\divide<numeric variable> by <number>",
        "description": "This command divides the <numeric variable> by <number>. The *number* must be a nonzero integer **[118]**. A *numeric variable* is: a) a parameter of type: integer, dimen, glue, or muglue; b) a token specified by `\\countdef`, `\\dimendef`, `\\skipdef`, or `\\muskipdef`; or c) a `\\count`, `\\dimen`, `\\skip`, or `\\muskip` register. The *by* is optional **[276]**.",
        "related": "advance, multiply, count, dimen, skip, muskip.",
        "descriptionshort": "divides a register by an integer.",
        "type": "command"
    },{
        "name": "multiply",
        "synopsis": "\\multiply<numeric variable> by <number>",
        "description": "This command multiplies the <numeric variable> by <number> (i.e., by an integer). The number must not produce a result which is too large for the variable otherwise TeX will generate an *arithemetic overflow* run-time error **[118]**. A <numeric variable> is: a) a parameter of type: integer, dimen, glue, or muglue; b) a token specified by `\\countdef`, `\\dimendef`, `\\skipdef`, or `\\muskipdef`; or c) a `\\count`, `\\dimen`, `\\skip`, or `\\muskip` register. The *by* is optional **[276]**.",
        "related": "advance, divide, count, dimen, skip, muskip.",
        "descriptionshort": "multiplies a register by an integer.",
        "type": "command"
    },{
        "name": "skip",
        "synopsis": "\\skip<8-bit register number>=<glue>",
        "description": "There are 256 skip registers: `\\skip0` to `\\skip255`. Each may hold <glue>. The commands `\\advance`, `\\multiply`, and `\\divide` allow limited arithemetic with the registers. A skip register may be placed in a dimen register. TeX converts glue  to a dimension by dropping the stretch and shrink components of the glue **[118]**. The skip registers obey TeX's grouping structure. So, changes to a register inside a group will not affect the value of the register outside the group unless `\\global` is used with the register **[119]**. The command '`\\showthe\\skip`*n*' writes the value for `\\skip`*n* to the terminal and to the log file **[121]**. The register `\\skip255` is available for temporary storage **[122]**.",
        "related": "skipdef, advance, multiply, divide, dimen.",
        "descriptionshort": "assigns <glue> to a \\skip register.",
        "type": "internal quantity"
    },{
        "name": "skipdef",
        "synopsis": "\\skipdef<name>=<8-bit register number>",
        "description": "A skip register may be used directly (e.g., '`\\skip25=3pt plus1pt minus1pt`') **[118]** or indirectly in one of two ways. Each indirect way involves setting up a symbolic name for a register (e.g., `\\smallskip`). The first indirect way uses the primitive `\\skipdef` (e.g., '`\\skipdef\\smallskip=25`'); this makes `\\smallskip` equivalent to `\\skip25`. So, the command '`\\smallskip=3pt plus1pt minus1pt`' sets up glue that might be used with `\\vskip` **[119]**. The second indirect way uses the Plain TeX command `\\newskip` (e.g., '`\\newskip\\smallskip`'). This time the control sequence `\\smallskip` is a skip register, but it is not at all apparent which one (the log file should contain a line '`\\smallskip=\\skip`*n*' for some *n*) **[121]**. The direct method is fine for registers used locally in a macro or in a group. The `\\newskip` method (or something equivalent if Plain TeX is not used) is the preferable indirect method. If macros from several sources are used, and two different `\\skipdef`'s use the same register number, the macros may interfere with each other. This type of problem is difficult to track down **[nr]**. TeX suppresses expansion when it is reading a control sequence that will be defined by a `\\skipdef` **[215]**.",
        "related": "skip.",
        "descriptionshort": "creates a symbolic name for a \\skip register.",
        "type": "command"
    },{
        "name": "toks",
        "synopsis": "\\toks<8-bit register number>={<replacement text>}",
        "description": "There are 256 toks registers: `\\toks0` to `\\toks255`. Each may hold a token list **[212]**. The toks registers obey TeX's grouping structure. So, changes to a register inside a group will not affect the value of the register outside the group unless `\\global` was used with the register **[nr]**. The command '`\\showthe\\toks`*n*' writes the contents of `\\toks`*n* to the terminal and to the log file. Also, the command '`\\the\\toks`*n*' typesets the contents of `\\toks`*n* **[215]**.",
        "related": "toksdef.",
        "descriptionshort": "assigns <replacement text> to a \\toks register.",
        "type": "internal quantity"
    },{
        "name": "toksdef",
        "synopsis": "\\toksdef<name>=<8-bit register number>",
        "description": "A toks register may be used directly (e.g., '`\\toks25 = {\\noindent Hello}`') **[118]** or indirectly in one of two ways. Each indirect way involves setting up a symbolic name for a register (e.g., `\\greeting`). The first indirect way uses the primitive `\\toksdef` (e.g., '`\\toksdef\\greeting=25`'); this makes `\\greeting` equivalent to `\\toks25`. So, the command '`\\greeting = {\\noindent Hello}`' sets up a token list. The second indirect way uses the Plain TeX command `\\newtoks` (e.g., '`\\newtoks\\greeting`'). This time the control sequence `\\greeting` is a toks register, but it is not at all apparent which one (the log file should contain a line '`\\greeting=\\toks`*n*' for some *n*) **[212]**. The direct method is fine for registers used locally in a macro or in a group. The `\\newtoks` method (or something equivalent if Plain TeX is not used) is the preferable indirect method. If macros from several sources are used, and two different `\\toksdef`'s use the same register number, the macros may interfere with each other. This type of problem is difficult to track down **[nr]**. TeX suppresses expansion when it is reading a control sequence that will be defined by a `\\toksdef` **[215]**.",
        "related": "toks.",
        "descriptionshort": "creates a symbolic name for a \\toks register.",
        "type": "command"
    },{
        "name": "cr",
        "synopsis": "\\cr",
        "description": "This command is placed at the end of the *preamble* of an `\\halign` and at the end of each row of data in the `\\halign` **[235]**. If a particular row in a table requires fewer columns than was specified in the preamble, a `\\cr` after the last one tells TeX : ''there are no more columns on this line'' **[245]**. When used with a `\\valign`, `\\cr` marks the bottom of a column **[249]**. Tokens specified by `\\everycr` are inserted after every `\\cr` **[275]**.",
        "related": "crcr, everycr, halign, valign.",
        "descriptionshort": "is a visible command which ends one row in a table.",
        "type": "command"
    },{
        "name": "crcr",
        "synopsis": "\\crcr",
        "description": "This commands acts like `\\cr` unless it immediately follows a `\\cr` or a `\\noalign` in which case it does nothing **[249]**. The command often appears in a macro used to format a table (e.g., Plain TeX's `\\matrix` or `\\cases`) **[361-362]**. Tokens specified by `\\everycr` are inserted after every nonredundant `\\crcr` **[275]**.",
        "related": "cr, everycr.",
        "descriptionshort": "is an alternate to \\cr.",
        "type": "command"
    },{
        "name": "everycr",
        "synopsis": "\\everycr{<token list>}",
        "description": "This parameter holds a list of tokens that gets inserted after every `\\cr` or nonredundant `\\crcr` **[275]**.",
        "related": "cr, crcr.",
        "descriptionshort": "holds tokens inserted after every \\cr or nonredundent \\crcr.",
        "type": "parameter (token)"
    },{
        "name": "halign",
        "synopsis": "\\halign<box specification>{<alignment material>}",
        "description": "There are three forms of `\\halign`: '`\\halign` {material}' **[235]**; '`\\halign` to <dimen> {material}'; and '`\\halign` spread <dimen> {material}' **[238]**. The *alignment material* consists of two parts: a) the *preamble* which consists of a number of *templates* describing each column in the table, and b) the rows of the table. A '`&`' (category code 4) is used to separate templates in the preamble and columns in each row of the table **[231 and 235]**. Spaces are ignored after a '`&`' **[236]**. Exactly one '`#`' (category 6) must appear in each template in the preamble. It means: ''Put the text for this column here.'' The preamble and each row must end with either `\\cr` or `\\crcr` **[235]**. Vertical rules are placed in a table by: a) using the Plain TeX macro '`\\offinterlineskip` or an equivalent to stop TeX from putting glue between the lines of the table; b) putting a strut with the correct height and depth on each line in the table; and c) creating a template containing `\\vrule` every place a vertical line is needed in the table **[245-246]**. Horizontal rules are placed in a table by saying '`\\noalign{\\hrule}`' after a `\\cr` or `\\crcr` **[246]**. An `\\halign` command is not allowed in restricted horizontal mode or in math mode. In horizontal mode it causes the current paragraph to end. It is allowed in display math mode only if the current math list is empty **[286 and 291]**.",
        "related": "cr, noalign, omit, span, tabskip, crcr, everycr, valign.",
        "descriptionshort": "begins the horizontal alignment of material (i.e., makes a table containing rows).",
        "type": "command"
    },{
        "name": "noalign",
        "synopsis": "\\noalign{<vertical/horizontal mode material>}",
        "description": "This command inserts <vertical mode material> in a table begun with `\\halign`. The command should follow a `\\cr` or a `\\crcr`. The *material* is placed without alignment between the rows in the table. Definitions inside the braces of `\\noalign` are local to that group **[237]**. For example `\\noalign{\\hrule}` inserts a rule between the rows of a table **[246]**. With `\\valign`, the command inserts <horizontal mode material> between the columns of the table **[249]**.",
        "related": "halign, cr, crcr, valign.",
        "descriptionshort": "inserts vertical mode material after a \\cr in a table.",
        "type": "command"
    },{
        "name": "omit",
        "synopsis": "\\omit",
        "description": "If `\\omit` is the first command in an entry of a table, TeX does not use the template specified in the table's *preamble* for the entry. Instead, TeX uses `#` as the template. This provides a way to customize an individual entry in the table **[240]**. Frequently, `\\omit` is combined with `\\span` to provide a custom template which spans two or more columns. The Plain TeX macro `\\multispan` makes it easy to span a specified number of columns with custom material **[243]**.",
        "related": "halign, span, valign.",
        "descriptionshort": "is used in the body of a table to change an entry's template from the one in the preamble.",
        "type": "command"
    },{
        "name": "span",
        "synopsis": "\\span",
        "description": "This command is used in an alignment, but it works differently depending on whether it is in the *preamble* or not. In the preamble it causes the next token to be expanded **[238]**. Outside the preamble it is used in place of the column separator '`&`'. The second use tells TeX to process the material on either side of the `\\span` as normal, but to put it in one box instead of two boxes when the row of the table is actually typeset **[243]**. When `\\span` appears outside the preamble in a `\\valign`, rows get spanned instead of columns **[249]**.",
        "related": "halign, omit, valign.",
        "descriptionshort": "combines adjacent entries in a table into a single entry.",
        "type": "command"
    },{
        "name": "tabskip",
        "synopsis": "\\tabskip=<glue>",
        "description": "This parameter holds glue which TeX places before the first column, after the last column, and between each column in an alignment **[237-238]**. Changes made to `\\tabskip` inside a *preamble* are local to the alignment unless `\\globaldefs` is positive. In particular, if `\\global` preceeds `\\tabskip`, TeX considers `\\global` to be part of a template **[238]**.",
        "related": "halign, valign.",
        "descriptionshort": "is optional glue put between columns in a table.",
        "type": "parameter (glue)"
    },{
        "name": "valign",
        "synopsis": "\\valign<box specification>{<alignment material>}",
        "description": "This command is similar to `\\halign` except rows and columns are interchanged. So, `\\cr` separates columns; `&` separates rows in 1 column; and `\\noalign` inserts horizontal mode material between columns (e.g., `\\vrule`). Each individual entry in a column is placed in a vbox whose depth is 0pt. The heights of each row in a `\\valign` are maximized, just as the widths of each column in an `\\halign` are. The `\\span` command now spans rows instead of columns **[249]**.",
        "related": "cr, noalign, omit, span, tabskip, crcr, everycr, halign.",
        "descriptionshort": "begins the vertical alignment of material (i.e., makes a table containing columns).",
        "type": "command"
    }
]}